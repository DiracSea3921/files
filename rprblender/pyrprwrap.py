

VERSION_MAJOR = 2
VERSION_MINOR = 1
VERSION_REVISION = 8
VERSION_BUILD = 1062473904
VERSION_MAJOR_MINOR_REVISION = 2097416
API_VERSION = VERSION_MAJOR_MINOR_REVISION
API_VERSION_MINOR = VERSION_BUILD
SUCCESS = 0
ERROR_COMPUTE_API_NOT_SUPPORTED = -1
ERROR_OUT_OF_SYSTEM_MEMORY = -2
ERROR_OUT_OF_VIDEO_MEMORY = -3
ERROR_INVALID_LIGHTPATH_EXPR = -5
ERROR_INVALID_IMAGE = -6
ERROR_INVALID_AA_METHOD = -7
ERROR_UNSUPPORTED_IMAGE_FORMAT = -8
ERROR_INVALID_GL_TEXTURE = -9
ERROR_INVALID_CL_IMAGE = -10
ERROR_INVALID_OBJECT = -11
ERROR_INVALID_PARAMETER = -12
ERROR_INVALID_TAG = -13
ERROR_INVALID_LIGHT = -14
ERROR_INVALID_CONTEXT = -15
ERROR_UNIMPLEMENTED = -16
ERROR_INVALID_API_VERSION = -17
ERROR_INTERNAL_ERROR = -18
ERROR_IO_ERROR = -19
ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE = -20
ERROR_MATERIAL_STACK_OVERFLOW = -21
ERROR_INVALID_PARAMETER_TYPE = -22
ERROR_UNSUPPORTED = -23
ERROR_OPENCL_OUT_OF_HOST_MEMORY = -24
ERROR_OPENGL = -25
ERROR_OPENCL = -26
ERROR_NULLPTR = -27
ERROR_NODETYPE = -28
ERROR_ABORTED = -29
PARAMETER_TYPE_FLOAT = 1
PARAMETER_TYPE_FLOAT2 = 2
PARAMETER_TYPE_FLOAT3 = 3
PARAMETER_TYPE_FLOAT4 = 4
PARAMETER_TYPE_IMAGE = 5
PARAMETER_TYPE_STRING = 6
PARAMETER_TYPE_SHADER = 7
PARAMETER_TYPE_UINT = 8
PARAMETER_TYPE_ULONG = 9
PARAMETER_TYPE_LONGLONG = 10
CREATION_FLAGS_ENABLE_GPU0 = 1
CREATION_FLAGS_ENABLE_GPU1 = 2
CREATION_FLAGS_ENABLE_GPU2 = 4
CREATION_FLAGS_ENABLE_GPU3 = 8
CREATION_FLAGS_ENABLE_CPU = 16
CREATION_FLAGS_ENABLE_GL_INTEROP = 32
CREATION_FLAGS_ENABLE_GPU4 = 64
CREATION_FLAGS_ENABLE_GPU5 = 128
CREATION_FLAGS_ENABLE_GPU6 = 256
CREATION_FLAGS_ENABLE_GPU7 = 512
CREATION_FLAGS_ENABLE_METAL = 1024
CREATION_FLAGS_ENABLE_GPU8 = 2048
CREATION_FLAGS_ENABLE_GPU9 = 4096
CREATION_FLAGS_ENABLE_GPU10 = 8192
CREATION_FLAGS_ENABLE_GPU11 = 16384
CREATION_FLAGS_ENABLE_GPU12 = 32768
CREATION_FLAGS_ENABLE_GPU13 = 65536
CREATION_FLAGS_ENABLE_GPU14 = 131072
CREATION_FLAGS_ENABLE_GPU15 = 262144
CREATION_FLAGS_ENABLE_DEBUG = 2147483648
FILTER_NONE = 0
FILTER_BOX = 1
FILTER_TRIANGLE = 2
FILTER_GAUSSIAN = 3
FILTER_MITCHELL = 4
FILTER_LANCZOS = 5
FILTER_BLACKMANHARRIS = 6
CONTEXT_SAMPLER_TYPE_SOBOL = 1
CONTEXT_SAMPLER_TYPE_RANDOM = 2
CONTEXT_SAMPLER_TYPE_CMJ = 3
SHAPE_TYPE_MESH = 1
SHAPE_TYPE_INSTANCE = 2
LIGHT_TYPE_POINT = 1
LIGHT_TYPE_DIRECTIONAL = 2
LIGHT_TYPE_SPOT = 3
LIGHT_TYPE_ENVIRONMENT = 4
LIGHT_TYPE_SKY = 5
LIGHT_TYPE_IES = 6
LIGHT_TYPE_SPHERE = 7
LIGHT_TYPE_DISK = 8
OBJECT_NAME = 7829367
OBJECT_UNIQUE_ID = 7829368
OBJECT_CUSTOM_PTR = 7829369
CONTEXT_CREATION_FLAGS = 258
CONTEXT_CACHE_PATH = 259
CONTEXT_RENDER_STATUS = 260
CONTEXT_RENDER_STATISTICS = 261
CONTEXT_DEVICE_COUNT = 262
CONTEXT_PARAMETER_COUNT = 263
CONTEXT_ACTIVE_PLUGIN = 264
CONTEXT_SCENE = 265
CONTEXT_ITERATIONS = 267
CONTEXT_IMAGE_FILTER_TYPE = 268
CONTEXT_IMAGE_FILTER_BOX_RADIUS = 269
CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS = 270
CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS = 271
CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS = 272
CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS = 273
CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS = 274
CONTEXT_TONE_MAPPING_TYPE = 275
CONTEXT_TONE_MAPPING_LINEAR_SCALE = 276
CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY = 277
CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE = 278
CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP = 279
CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE = 280
CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE = 281
CONTEXT_TONE_MAPPING_REINHARD02_BURN = 282
CONTEXT_MAX_RECURSION = 283
CONTEXT_RAY_CAST_EPISLON = 284
CONTEXT_RADIANCE_CLAMP = 285
CONTEXT_X_FLIP = 286
CONTEXT_Y_FLIP = 287
CONTEXT_TEXTURE_GAMMA = 288
CONTEXT_PDF_THRESHOLD = 289
CONTEXT_RENDER_MODE = 290
CONTEXT_ROUGHNESS_CAP = 291
CONTEXT_DISPLAY_GAMMA = 292
CONTEXT_MATERIAL_STACK_SIZE = 293
CONTEXT_CLIPPING_PLANE = 294
CONTEXT_GPU0_NAME = 295
CONTEXT_GPU1_NAME = 296
CONTEXT_GPU2_NAME = 297
CONTEXT_GPU3_NAME = 298
CONTEXT_CPU_NAME = 299
CONTEXT_GPU4_NAME = 300
CONTEXT_GPU5_NAME = 301
CONTEXT_GPU6_NAME = 302
CONTEXT_GPU7_NAME = 303
CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY = 304
CONTEXT_FRAMECOUNT = 305
CONTEXT_TEXTURE_COMPRESSION = 306
CONTEXT_AO_RAY_LENGTH = 307
CONTEXT_OOC_TEXTURE_CACHE = 308
CONTEXT_PREVIEW = 309
CONTEXT_CPU_THREAD_LIMIT = 310
CONTEXT_LAST_ERROR_MESSAGE = 311
CONTEXT_MAX_DEPTH_DIFFUSE = 312
CONTEXT_MAX_DEPTH_GLOSSY = 313
CONTEXT_OOC_CACHE_PATH = 314
CONTEXT_MAX_DEPTH_REFRACTION = 315
CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION = 316
CONTEXT_RENDER_LAYER_MASK = 317
CONTEXT_SINGLE_LEVEL_BVH_ENABLED = 318
CONTEXT_TRANSPARENT_BACKGROUND = 319
CONTEXT_MAX_DEPTH_SHADOW = 320
CONTEXT_API_VERSION = 321
CONTEXT_GPU8_NAME = 322
CONTEXT_GPU9_NAME = 323
CONTEXT_GPU10_NAME = 324
CONTEXT_GPU11_NAME = 325
CONTEXT_GPU12_NAME = 326
CONTEXT_GPU13_NAME = 327
CONTEXT_GPU14_NAME = 328
CONTEXT_GPU15_NAME = 329
CONTEXT_API_VERSION_MINOR = 330
CONTEXT_METAL_PERFORMANCE_SHADER = 331
CONTEXT_USER_TEXTURE_0 = 332
CONTEXT_USER_TEXTURE_1 = 333
CONTEXT_USER_TEXTURE_2 = 334
CONTEXT_USER_TEXTURE_3 = 335
CONTEXT_MIPMAP_LOD_OFFSET = 336
CONTEXT_AO_RAY_COUNT = 337
CONTEXT_SAMPLER_TYPE = 338
CONTEXT_ADAPTIVE_SAMPLING_TILE_SIZE = 339
CONTEXT_ADAPTIVE_SAMPLING_MIN_SPP = 340
CONTEXT_ADAPTIVE_SAMPLING_THRESHOLD = 341
CONTEXT_TILE_SIZE = 342
CONTEXT_LIST_CREATED_CAMERAS = 343
CONTEXT_LIST_CREATED_MATERIALNODES = 344
CONTEXT_LIST_CREATED_LIGHTS = 345
CONTEXT_LIST_CREATED_SHAPES = 346
CONTEXT_LIST_CREATED_POSTEFFECTS = 347
CONTEXT_LIST_CREATED_HETEROVOLUMES = 348
CONTEXT_LIST_CREATED_GRIDS = 349
CONTEXT_LIST_CREATED_BUFFERS = 350
CONTEXT_LIST_CREATED_IMAGES = 351
CONTEXT_LIST_CREATED_FRAMEBUFFERS = 352
CONTEXT_LIST_CREATED_SCENES = 353
CONTEXT_LIST_CREATED_CURVES = 354
CONTEXT_LIST_CREATED_MATERIALSYSTEM = 355
CONTEXT_LIST_CREATED_COMPOSITE = 356
CONTEXT_LIST_CREATED_LUT = 357
CONTEXT_AA_ENABLED = 358
CONTEXT_ACTIVE_PIXEL_COUNT = 359
CONTEXT_TRACING_ENABLED = 360
CONTEXT_TRACING_PATH = 361
CONTEXT_TILE_RECT = 362
CONTEXT_PLUGIN_VERSION = 363
CONTEXT_RUSSIAN_ROULETTE_DEPTH = 364
CONTEXT_SHADOW_CATCHER_BAKING = 365
CONTEXT_RENDER_UPDATE_CALLBACK_FUNC = 366
CONTEXT_RENDER_UPDATE_CALLBACK_DATA = 367
CONTEXT_COMPILE_CALLBACK_FUNC = 1537
CONTEXT_COMPILE_CALLBACK_DATA = 1538
CONTEXT_TEXTURE_CACHE_PATH = 368
CONTEXT_OCIO_CONFIG_PATH = 369
CONTEXT_OCIO_RENDERING_COLOR_SPACE = 370
CONTEXT_CONTOUR_USE_OBJECTID = 371
CONTEXT_CONTOUR_USE_MATERIALID = 372
CONTEXT_CONTOUR_USE_NORMAL = 373
CONTEXT_CONTOUR_NORMAL_THRESHOLD = 374
CONTEXT_CONTOUR_LINEWIDTH_OBJECTID = 375
CONTEXT_CONTOUR_LINEWIDTH_MATERIALID = 376
CONTEXT_CONTOUR_LINEWIDTH_NORMAL = 377
CONTEXT_CONTOUR_ANTIALIASING = 378
CONTEXT_CONTOUR_DEBUG_ENABLED = 383
CONTEXT_GPUINTEGRATOR = 379
CONTEXT_CPUINTEGRATOR = 380
CONTEXT_BEAUTY_MOTION_BLUR = 381
CONTEXT_CAUSTICS_REDUCTION = 382
CONTEXT_NAME = OBJECT_NAME
CONTEXT_UNIQUE_ID = OBJECT_UNIQUE_ID
CONTEXT_CUSTOM_PTR = OBJECT_CUSTOM_PTR
CONTEXT_MAX = 368
CAMERA_TRANSFORM = 513
CAMERA_FSTOP = 514
CAMERA_APERTURE_BLADES = 515
CAMERA_RESPONSE = 516
CAMERA_EXPOSURE = 517
CAMERA_FOCAL_LENGTH = 518
CAMERA_SENSOR_SIZE = 519
CAMERA_MODE = 520
CAMERA_ORTHO_WIDTH = 521
CAMERA_ORTHO_HEIGHT = 522
CAMERA_FOCUS_DISTANCE = 523
CAMERA_POSITION = 524
CAMERA_LOOKAT = 525
CAMERA_UP = 526
CAMERA_FOCAL_TILT = 527
CAMERA_LENS_SHIFT = 528
CAMERA_IPD = 529
CAMERA_TILT_CORRECTION = 530
CAMERA_NEAR_PLANE = 531
CAMERA_FAR_PLANE = 532
CAMERA_LINEAR_MOTION = 533
CAMERA_ANGULAR_MOTION = 534
CAMERA_NAME = OBJECT_NAME
CAMERA_UNIQUE_ID = OBJECT_UNIQUE_ID
CAMERA_CUSTOM_PTR = OBJECT_CUSTOM_PTR
IMAGE_FORMAT = 769
IMAGE_DESC = 770
IMAGE_DATA = 771
IMAGE_DATA_SIZEBYTE = 772
IMAGE_WRAP = 773
IMAGE_FILTER = 774
IMAGE_GAMMA = 775
IMAGE_MIPMAP_ENABLED = 776
IMAGE_MIP_COUNT = 777
IMAGE_GAMMA_FROM_FILE = 778
IMAGE_UDIM = 779
IMAGE_OCIO_COLORSPACE = 780
IMAGE_INTERNAL_COMPRESSION = 781
IMAGE_NAME = OBJECT_NAME
IMAGE_UNIQUE_ID = OBJECT_UNIQUE_ID
IMAGE_CUSTOM_PTR = OBJECT_CUSTOM_PTR
BUFFER_DESC = 848
BUFFER_DATA = 849
BUFFER_NAME = OBJECT_NAME
BUFFER_UNIQUE_ID = OBJECT_UNIQUE_ID
BUFFER_CUSTOM_PTR = OBJECT_CUSTOM_PTR
SHAPE_TYPE = 1025
SHAPE_VIDMEM_USAGE = 1026
SHAPE_TRANSFORM = 1027
SHAPE_MATERIAL = 1028
SHAPE_LINEAR_MOTION = 1029
SHAPE_ANGULAR_MOTION = 1030
SHAPE_SHADOW_FLAG = 1032
SHAPE_SUBDIVISION_FACTOR = 1033
SHAPE_DISPLACEMENT_SCALE = 1034
SHAPE_SHADOW_CATCHER_FLAG = 1038
SHAPE_VOLUME_MATERIAL = 1039
SHAPE_OBJECT_GROUP_ID = 1040
SHAPE_SUBDIVISION_CREASEWEIGHT = 1041
SHAPE_SUBDIVISION_BOUNDARYINTEROP = 1042
SHAPE_DISPLACEMENT_MATERIAL = 1043
SHAPE_MATERIALS_PER_FACE = 1045
SHAPE_SCALE_MOTION = 1046
SHAPE_HETERO_VOLUME = 1047
SHAPE_LAYER_MASK = 1048
SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG = 1036
SHAPE_VISIBILITY_SHADOW = 1050
SHAPE_VISIBILITY_REFLECTION = 1051
SHAPE_VISIBILITY_REFRACTION = 1052
SHAPE_VISIBILITY_TRANSPARENT = 1053
SHAPE_VISIBILITY_DIFFUSE = 1054
SHAPE_VISIBILITY_GLOSSY_REFLECTION = 1055
SHAPE_VISIBILITY_GLOSSY_REFRACTION = 1056
SHAPE_VISIBILITY_LIGHT = 1057
SHAPE_LIGHT_GROUP_ID = 1058
SHAPE_STATIC = 1059
SHAPE_PER_VERTEX_VALUE0 = 1060
SHAPE_PER_VERTEX_VALUE1 = 1061
SHAPE_PER_VERTEX_VALUE2 = 1062
SHAPE_PER_VERTEX_VALUE3 = 1063
SHAPE_REFLECTION_CATCHER_FLAG = 1064
SHAPE_OBJECT_ID = 1065
SHAPE_SUBDIVISION_AUTO_RATIO_CAP = 1066
SHAPE_MOTION_TRANSFORMS_COUNT = 1067
SHAPE_MOTION_TRANSFORMS = 1068
SHAPE_CONTOUR_IGNORE = 1069
SHAPE_NAME = OBJECT_NAME
SHAPE_UNIQUE_ID = OBJECT_UNIQUE_ID
SHAPE_CUSTOM_PTR = OBJECT_CUSTOM_PTR
MESH_POLYGON_COUNT = 1281
MESH_VERTEX_COUNT = 1282
MESH_NORMAL_COUNT = 1283
MESH_UV_COUNT = 1284
MESH_VERTEX_ARRAY = 1285
MESH_NORMAL_ARRAY = 1286
MESH_UV_ARRAY = 1287
MESH_VERTEX_INDEX_ARRAY = 1288
MESH_NORMAL_INDEX_ARRAY = 1289
MESH_UV_INDEX_ARRAY = 1290
MESH_VERTEX_STRIDE = 1292
MESH_NORMAL_STRIDE = 1293
MESH_UV_STRIDE = 1294
MESH_VERTEX_INDEX_STRIDE = 1295
MESH_NORMAL_INDEX_STRIDE = 1296
MESH_UV_INDEX_STRIDE = 1297
MESH_NUM_FACE_VERTICES_ARRAY = 1298
MESH_UV2_COUNT = 1299
MESH_UV2_ARRAY = 1300
MESH_UV2_INDEX_ARRAY = 1301
MESH_UV2_STRIDE = 1302
MESH_UV2_INDEX_STRIDE = 1303
MESH_UV_DIM = 1304
SCENE_SHAPE_COUNT = 1793
SCENE_LIGHT_COUNT = 1794
SCENE_SHAPE_LIST = 1796
SCENE_LIGHT_LIST = 1797
SCENE_CAMERA = 1798
SCENE_CAMERA_RIGHT = 1799
SCENE_BACKGROUND_IMAGE = 1800
SCENE_AABB = 1805
SCENE_HETEROVOLUME_LIST = 1806
SCENE_HETEROVOLUME_COUNT = 1807
SCENE_CURVE_LIST = 1808
SCENE_CURVE_COUNT = 1809
SCENE_ENVIRONMENT_LIGHT = 1810
SCENE_NAME = OBJECT_NAME
SCENE_UNIQUE_ID = OBJECT_UNIQUE_ID
SCENE_CUSTOM_PTR = OBJECT_CUSTOM_PTR
LUT_FILENAME = 2128
LUT_DATA = 2129
LIGHT_TYPE = 2049
LIGHT_TRANSFORM = 2051
LIGHT_GROUP_ID = 2053
LIGHT_NAME = OBJECT_NAME
LIGHT_UNIQUE_ID = OBJECT_UNIQUE_ID
LIGHT_CUSTOM_PTR = OBJECT_CUSTOM_PTR
POINT_LIGHT_RADIANT_POWER = 2052
DIRECTIONAL_LIGHT_RADIANT_POWER = 2056
DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE = 2058
SPOT_LIGHT_RADIANT_POWER = 2059
SPOT_LIGHT_CONE_SHAPE = 2060
ENVIRONMENT_LIGHT_IMAGE = 2063
ENVIRONMENT_LIGHT_INTENSITY_SCALE = 2064
ENVIRONMENT_LIGHT_PORTAL_LIST = 2072
ENVIRONMENT_LIGHT_PORTAL_COUNT = 2073
ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION = 2074
ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION = 2075
ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY = 2076
ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND = 2077
SKY_LIGHT_TURBIDITY = 2066
SKY_LIGHT_ALBEDO = 2067
SKY_LIGHT_SCALE = 2068
SKY_LIGHT_DIRECTION = 2069
SKY_LIGHT_PORTAL_LIST = 2080
SKY_LIGHT_PORTAL_COUNT = 2081
IES_LIGHT_RADIANT_POWER = 2070
IES_LIGHT_IMAGE_DESC = 2071
SPHERE_LIGHT_RADIANT_POWER = 2082
SPHERE_LIGHT_RADIUS = 2084
DISK_LIGHT_RADIANT_POWER = 2083
DISK_LIGHT_RADIUS = 2085
DISK_LIGHT_ANGLE = 2086
PARAMETER_NAME = 4609
PARAMETER_TYPE = 4611
PARAMETER_DESCRIPTION = 4612
PARAMETER_VALUE = 4613
FRAMEBUFFER_FORMAT = 4865
FRAMEBUFFER_DESC = 4866
FRAMEBUFFER_DATA = 4867
FRAMEBUFFER_GL_TARGET = 4868
FRAMEBUFFER_GL_MIPLEVEL = 4869
FRAMEBUFFER_GL_TEXTURE = 4870
FRAMEBUFFER_LPE = 4871
FRAMEBUFFER_NAME = OBJECT_NAME
FRAMEBUFFER_UNIQUE_ID = OBJECT_UNIQUE_ID
FRAMEBUFFER_CUSTOM_PTR = OBJECT_CUSTOM_PTR
INSTANCE_PARENT_SHAPE = 5633
COMPONENT_TYPE_UINT8 = 1
COMPONENT_TYPE_FLOAT16 = 2
COMPONENT_TYPE_FLOAT32 = 3
COMPONENT_TYPE_UNKNOWN = 4
BUFFER_ELEMENT_TYPE_INT32 = 1
BUFFER_ELEMENT_TYPE_FLOAT32 = 2
RENDER_MODE_GLOBAL_ILLUMINATION = 1
RENDER_MODE_DIRECT_ILLUMINATION = 2
RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW = 3
RENDER_MODE_WIREFRAME = 4
RENDER_MODE_MATERIAL_INDEX = 5
RENDER_MODE_POSITION = 6
RENDER_MODE_NORMAL = 7
RENDER_MODE_TEXCOORD = 8
RENDER_MODE_AMBIENT_OCCLUSION = 9
RENDER_MODE_DIFFUSE = 10
CAMERA_MODE_PERSPECTIVE = 1
CAMERA_MODE_ORTHOGRAPHIC = 2
CAMERA_MODE_LATITUDE_LONGITUDE_360 = 3
CAMERA_MODE_LATITUDE_LONGITUDE_STEREO = 4
CAMERA_MODE_CUBEMAP = 5
CAMERA_MODE_CUBEMAP_STEREO = 6
CAMERA_MODE_FISHEYE = 7
TONEMAPPING_OPERATOR_NONE = 0
TONEMAPPING_OPERATOR_LINEAR = 1
TONEMAPPING_OPERATOR_PHOTOLINEAR = 2
TONEMAPPING_OPERATOR_AUTOLINEAR = 3
TONEMAPPING_OPERATOR_MAXWHITE = 4
TONEMAPPING_OPERATOR_REINHARD02 = 5
TONEMAPPING_OPERATOR_EXPONENTIAL = 6
VOLUME_TYPE_NONE = 65535
VOLUME_TYPE_HOMOGENEOUS = 0
VOLUME_TYPE_HETEROGENEOUS = 1
MATERIAL_SYSTEM_NODE_LIST = 4352
MATERIAL_NODE_TYPE = 4353
MATERIAL_NODE_SYSTEM = 4354
MATERIAL_NODE_INPUT_COUNT = 4355
MATERIAL_NODE_ID = 4356
MATERIAL_NODE_NAME = OBJECT_NAME
MATERIAL_NODE_UNIQUE_ID = OBJECT_UNIQUE_ID
MATERIAL_CUSTOM_PTR = OBJECT_CUSTOM_PTR
MATERIAL_NODE_INPUT_NAME = 4355
MATERIAL_NODE_INPUT_DESCRIPTION = 4357
MATERIAL_NODE_INPUT_VALUE = 4358
MATERIAL_NODE_INPUT_TYPE = 4359
MATERIAL_NODE_DIFFUSE = 1
MATERIAL_NODE_MICROFACET = 2
MATERIAL_NODE_REFLECTION = 3
MATERIAL_NODE_REFRACTION = 4
MATERIAL_NODE_MICROFACET_REFRACTION = 5
MATERIAL_NODE_TRANSPARENT = 6
MATERIAL_NODE_EMISSIVE = 7
MATERIAL_NODE_WARD = 8
MATERIAL_NODE_ADD = 9
MATERIAL_NODE_BLEND = 10
MATERIAL_NODE_ARITHMETIC = 11
MATERIAL_NODE_FRESNEL = 12
MATERIAL_NODE_NORMAL_MAP = 13
MATERIAL_NODE_IMAGE_TEXTURE = 14
MATERIAL_NODE_NOISE2D_TEXTURE = 15
MATERIAL_NODE_DOT_TEXTURE = 16
MATERIAL_NODE_GRADIENT_TEXTURE = 17
MATERIAL_NODE_CHECKER_TEXTURE = 18
MATERIAL_NODE_CONSTANT_TEXTURE = 19
MATERIAL_NODE_INPUT_LOOKUP = 20
MATERIAL_NODE_BLEND_VALUE = 22
MATERIAL_NODE_PASSTHROUGH = 23
MATERIAL_NODE_ORENNAYAR = 24
MATERIAL_NODE_FRESNEL_SCHLICK = 25
MATERIAL_NODE_DIFFUSE_REFRACTION = 27
MATERIAL_NODE_BUMP_MAP = 28
MATERIAL_NODE_VOLUME = 29
MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION = 30
MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION = 31
MATERIAL_NODE_TWOSIDED = 32
MATERIAL_NODE_UV_PROCEDURAL = 33
MATERIAL_NODE_MICROFACET_BECKMANN = 34
MATERIAL_NODE_PHONG = 35
MATERIAL_NODE_BUFFER_SAMPLER = 36
MATERIAL_NODE_UV_TRIPLANAR = 37
MATERIAL_NODE_AO_MAP = 38
MATERIAL_NODE_USER_TEXTURE_0 = 39
MATERIAL_NODE_USER_TEXTURE_1 = 40
MATERIAL_NODE_USER_TEXTURE_2 = 41
MATERIAL_NODE_USER_TEXTURE_3 = 42
MATERIAL_NODE_UBERV2 = 43
MATERIAL_NODE_TRANSFORM = 44
MATERIAL_NODE_RGB_TO_HSV = 45
MATERIAL_NODE_HSV_TO_RGB = 46
MATERIAL_NODE_MATX_DIFFUSE_BRDF = 4096
MATERIAL_NODE_MATX_DIELECTRIC_BRDF = 4097
MATERIAL_NODE_MATX_GENERALIZED_SCHLICK_BRDF = 4098
MATERIAL_NODE_MATX_NOISE3D = 4099
MATERIAL_NODE_MATX_TANGENT = 4100
MATERIAL_NODE_MATX_NORMAL = 4101
MATERIAL_NODE_MATX_POSITION = 4102
MATERIAL_NODE_MATX_ROUGHNESS_ANISOTROPY = 4103
MATERIAL_NODE_MATX_ROTATE3D = 4104
MATERIAL_NODE_MATX_NORMALIZE = 4105
MATERIAL_NODE_MATX_IFGREATER = 4106
MATERIAL_NODE_MATX_SHEEN_BRDF = 4107
MATERIAL_NODE_MATX_DIFFUSE_BTDF = 4108
MATERIAL_NODE_MATX_CONVERT = 4109
MATERIAL_NODE_MATX_SUBSURFACE_BRDF = 4110
MATERIAL_NODE_MATX_DIELECTRIC_BTDF = 4111
MATERIAL_NODE_MATX_CONDUCTOR_BRDF = 4112
MATERIAL_NODE_MATX_FRESNEL = 4113
MATERIAL_NODE_MATX_LUMINANCE = 4114
MATERIAL_NODE_MATX_FRACTAL3D = 4115
MATERIAL_NODE_MATX_MIX = 4116
MATERIAL_INPUT_COLOR = 0
MATERIAL_INPUT_COLOR0 = 1
MATERIAL_INPUT_COLOR1 = 2
MATERIAL_INPUT_NORMAL = 3
MATERIAL_INPUT_UV = 4
MATERIAL_INPUT_DATA = 5
MATERIAL_INPUT_ROUGHNESS = 6
MATERIAL_INPUT_IOR = 7
MATERIAL_INPUT_ROUGHNESS_X = 8
MATERIAL_INPUT_ROUGHNESS_Y = 9
MATERIAL_INPUT_ROTATION = 10
MATERIAL_INPUT_WEIGHT = 11
MATERIAL_INPUT_OP = 12
MATERIAL_INPUT_INVEC = 13
MATERIAL_INPUT_UV_SCALE = 14
MATERIAL_INPUT_VALUE = 15
MATERIAL_INPUT_REFLECTANCE = 16
MATERIAL_INPUT_SCALE = 17
MATERIAL_INPUT_SCATTERING = 18
MATERIAL_INPUT_ABSORBTION = 19
MATERIAL_INPUT_EMISSION = 20
MATERIAL_INPUT_G = 21
MATERIAL_INPUT_MULTISCATTER = 22
MATERIAL_INPUT_COLOR2 = 23
MATERIAL_INPUT_COLOR3 = 24
MATERIAL_INPUT_ANISOTROPIC = 25
MATERIAL_INPUT_FRONTFACE = 26
MATERIAL_INPUT_BACKFACE = 27
MATERIAL_INPUT_ORIGIN = 28
MATERIAL_INPUT_ZAXIS = 29
MATERIAL_INPUT_XAXIS = 30
MATERIAL_INPUT_THRESHOLD = 31
MATERIAL_INPUT_OFFSET = 32
MATERIAL_INPUT_UV_TYPE = 33
MATERIAL_INPUT_RADIUS = 34
MATERIAL_INPUT_SIDE = 35
MATERIAL_INPUT_CAUSTICS = 36
MATERIAL_INPUT_TRANSMISSION_COLOR = 37
MATERIAL_INPUT_THICKNESS = 38
MATERIAL_INPUT_0 = 39
MATERIAL_INPUT_1 = 40
MATERIAL_INPUT_2 = 41
MATERIAL_INPUT_3 = 42
MATERIAL_INPUT_4 = 43
MATERIAL_INPUT_SCHLICK_APPROXIMATION = 44
MATERIAL_INPUT_APPLYSURFACE = 45
MATERIAL_INPUT_TANGENT = 46
MATERIAL_INPUT_DISTRIBUTION = 47
MATERIAL_INPUT_BASE = 48
MATERIAL_INPUT_TINT = 49
MATERIAL_INPUT_EXPONENT = 50
MATERIAL_INPUT_AMPLITUDE = 51
MATERIAL_INPUT_PIVOT = 52
MATERIAL_INPUT_POSITION = 53
MATERIAL_INPUT_AMOUNT = 54
MATERIAL_INPUT_AXIS = 55
MATERIAL_INPUT_LUMACOEFF = 56
MATERIAL_INPUT_REFLECTIVITY = 57
MATERIAL_INPUT_EDGE_COLOR = 58
MATERIAL_INPUT_VIEW_DIRECTION = 59
MATERIAL_INPUT_INTERIOR = 60
MATERIAL_INPUT_OCTAVES = 61
MATERIAL_INPUT_LACUNARITY = 62
MATERIAL_INPUT_DIMINISH = 63
MATERIAL_INPUT_WRAP_U = 64
MATERIAL_INPUT_WRAP_V = 65
MATERIAL_INPUT_WRAP_W = 66
MATERIAL_INPUT_UBER_DIFFUSE_COLOR = 2320
MATERIAL_INPUT_UBER_DIFFUSE_WEIGHT = 2343
MATERIAL_INPUT_UBER_DIFFUSE_ROUGHNESS = 2321
MATERIAL_INPUT_UBER_DIFFUSE_NORMAL = 2322
MATERIAL_INPUT_UBER_REFLECTION_COLOR = 2323
MATERIAL_INPUT_UBER_REFLECTION_WEIGHT = 2344
MATERIAL_INPUT_UBER_REFLECTION_ROUGHNESS = 2324
MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY = 2325
MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY_ROTATION = 2326
MATERIAL_INPUT_UBER_REFLECTION_MODE = 2327
MATERIAL_INPUT_UBER_REFLECTION_IOR = 2328
MATERIAL_INPUT_UBER_REFLECTION_METALNESS = 2329
MATERIAL_INPUT_UBER_REFLECTION_NORMAL = 2345
MATERIAL_INPUT_UBER_REFLECTION_DIELECTRIC_REFLECTANCE = 2366
MATERIAL_INPUT_UBER_REFRACTION_COLOR = 2330
MATERIAL_INPUT_UBER_REFRACTION_WEIGHT = 2346
MATERIAL_INPUT_UBER_REFRACTION_ROUGHNESS = 2331
MATERIAL_INPUT_UBER_REFRACTION_IOR = 2332
MATERIAL_INPUT_UBER_REFRACTION_NORMAL = 2347
MATERIAL_INPUT_UBER_REFRACTION_THIN_SURFACE = 2333
MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_COLOR = 2348
MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_DISTANCE = 2349
MATERIAL_INPUT_UBER_REFRACTION_CAUSTICS = 2350
MATERIAL_INPUT_UBER_COATING_COLOR = 2334
MATERIAL_INPUT_UBER_COATING_WEIGHT = 2351
MATERIAL_INPUT_UBER_COATING_ROUGHNESS = 2335
MATERIAL_INPUT_UBER_COATING_MODE = 2336
MATERIAL_INPUT_UBER_COATING_IOR = 2337
MATERIAL_INPUT_UBER_COATING_METALNESS = 2338
MATERIAL_INPUT_UBER_COATING_NORMAL = 2339
MATERIAL_INPUT_UBER_COATING_TRANSMISSION_COLOR = 2352
MATERIAL_INPUT_UBER_COATING_THICKNESS = 2353
MATERIAL_INPUT_UBER_SHEEN = 2354
MATERIAL_INPUT_UBER_SHEEN_TINT = 2355
MATERIAL_INPUT_UBER_SHEEN_WEIGHT = 2356
MATERIAL_INPUT_UBER_EMISSION_COLOR = 2340
MATERIAL_INPUT_UBER_EMISSION_WEIGHT = 2341
MATERIAL_INPUT_UBER_EMISSION_MODE = 2357
MATERIAL_INPUT_UBER_TRANSPARENCY = 2342
MATERIAL_INPUT_UBER_SSS_SCATTER_COLOR = 2359
MATERIAL_INPUT_UBER_SSS_SCATTER_DISTANCE = 2360
MATERIAL_INPUT_UBER_SSS_SCATTER_DIRECTION = 2361
MATERIAL_INPUT_UBER_SSS_WEIGHT = 2362
MATERIAL_INPUT_UBER_SSS_MULTISCATTER = 2363
MATERIAL_INPUT_UBER_BACKSCATTER_WEIGHT = 2364
MATERIAL_INPUT_UBER_BACKSCATTER_COLOR = 2365
MATERIAL_INPUT_UBER_FRESNEL_SCHLICK_APPROXIMATION = MATERIAL_INPUT_SCHLICK_APPROXIMATION
MATERIAL_INPUT_RASTER_METALLIC = 2305
MATERIAL_INPUT_RASTER_ROUGHNESS = 2306
MATERIAL_INPUT_RASTER_SUBSURFACE = 2307
MATERIAL_INPUT_RASTER_ANISOTROPIC = 2308
MATERIAL_INPUT_RASTER_SPECULAR = 2309
MATERIAL_INPUT_RASTER_SPECULARTINT = 2310
MATERIAL_INPUT_RASTER_SHEEN = 2311
MATERIAL_INPUT_RASTER_SHEENTINT = 2312
MATERIAL_INPUT_RASTER_CLEARCOAT = 2314
MATERIAL_INPUT_RASTER_CLEARCOATGLOSS = 2315
MATERIAL_INPUT_RASTER_COLOR = 2316
MATERIAL_INPUT_RASTER_NORMAL = 2317
UBER_MATERIAL_IOR_MODE_PBR = 1
UBER_MATERIAL_IOR_MODE_METALNESS = 2
UBER_MATERIAL_EMISSION_MODE_SINGLESIDED = 1
UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED = 2
MATERIAL_NODE_OP_ADD = 0
MATERIAL_NODE_OP_SUB = 1
MATERIAL_NODE_OP_MUL = 2
MATERIAL_NODE_OP_DIV = 3
MATERIAL_NODE_OP_SIN = 4
MATERIAL_NODE_OP_COS = 5
MATERIAL_NODE_OP_TAN = 6
MATERIAL_NODE_OP_SELECT_X = 7
MATERIAL_NODE_OP_SELECT_Y = 8
MATERIAL_NODE_OP_SELECT_Z = 9
MATERIAL_NODE_OP_COMBINE = 10
MATERIAL_NODE_OP_DOT3 = 11
MATERIAL_NODE_OP_CROSS3 = 12
MATERIAL_NODE_OP_LENGTH3 = 13
MATERIAL_NODE_OP_NORMALIZE3 = 14
MATERIAL_NODE_OP_POW = 15
MATERIAL_NODE_OP_ACOS = 16
MATERIAL_NODE_OP_ASIN = 17
MATERIAL_NODE_OP_ATAN = 18
MATERIAL_NODE_OP_AVERAGE_XYZ = 19
MATERIAL_NODE_OP_AVERAGE = 20
MATERIAL_NODE_OP_MIN = 21
MATERIAL_NODE_OP_MAX = 22
MATERIAL_NODE_OP_FLOOR = 23
MATERIAL_NODE_OP_MOD = 24
MATERIAL_NODE_OP_ABS = 25
MATERIAL_NODE_OP_SHUFFLE_YZWX = 26
MATERIAL_NODE_OP_SHUFFLE_ZWXY = 27
MATERIAL_NODE_OP_SHUFFLE_WXYZ = 28
MATERIAL_NODE_OP_MAT_MUL = 29
MATERIAL_NODE_OP_SELECT_W = 30
MATERIAL_NODE_OP_DOT4 = 31
MATERIAL_NODE_OP_LOG = 32
MATERIAL_NODE_OP_LOWER_OR_EQUAL = 33
MATERIAL_NODE_OP_LOWER = 34
MATERIAL_NODE_OP_GREATER_OR_EQUAL = 35
MATERIAL_NODE_OP_GREATER = 36
MATERIAL_NODE_OP_EQUAL = 37
MATERIAL_NODE_OP_NOT_EQUAL = 38
MATERIAL_NODE_OP_AND = 39
MATERIAL_NODE_OP_OR = 40
MATERIAL_NODE_OP_TERNARY = 41
MATERIAL_NODE_LOOKUP_UV = 0
MATERIAL_NODE_LOOKUP_N = 1
MATERIAL_NODE_LOOKUP_P = 2
MATERIAL_NODE_LOOKUP_INVEC = 3
MATERIAL_NODE_LOOKUP_OUTVEC = 4
MATERIAL_NODE_LOOKUP_UV1 = 5
MATERIAL_NODE_LOOKUP_P_LOCAL = 6
MATERIAL_NODE_LOOKUP_VERTEX_VALUE0 = 7
MATERIAL_NODE_LOOKUP_VERTEX_VALUE1 = 8
MATERIAL_NODE_LOOKUP_VERTEX_VALUE2 = 9
MATERIAL_NODE_LOOKUP_VERTEX_VALUE3 = 10
MATERIAL_NODE_LOOKUP_SHAPE_RANDOM_COLOR = 11
MATERIAL_NODE_LOOKUP_OBJECT_ID = 12
MATERIAL_NODE_LOOKUP_PRIMITIVE_RANDOM_COLOR = 13
MATERIAL_NODE_UVTYPE_PLANAR = 0
MATERIAL_NODE_UVTYPE_CYLINDICAL = 1
MATERIAL_NODE_UVTYPE_SPHERICAL = 2
MATERIAL_NODE_UVTYPE_PROJECT = 3
MATERIAL_NODE_TRANSFORM_ROTATE_LOCAL_TO_WORLD = 1
POST_EFFECT_TYPE = 0
POST_EFFECT_WHITE_BALANCE_COLOR_SPACE = 4
POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE = 5
POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE = 6
POST_EFFECT_SIMPLE_TONEMAP_CONTRAST = 7
POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP = 8
POST_EFFECT_BLOOM_RADIUS = 9
POST_EFFECT_BLOOM_THRESHOLD = 10
POST_EFFECT_BLOOM_WEIGHT = 11
POST_EFFECT_NAME = OBJECT_NAME
POST_EFFECT_UNIQUE_ID = OBJECT_UNIQUE_ID
POST_EFFECT_CUSTOM_PTR = OBJECT_CUSTOM_PTR
AOV_COLOR = 0
AOV_OPACITY = 1
AOV_WORLD_COORDINATE = 2
AOV_UV = 3
AOV_MATERIAL_ID = 4
AOV_GEOMETRIC_NORMAL = 5
AOV_SHADING_NORMAL = 6
AOV_DEPTH = 7
AOV_OBJECT_ID = 8
AOV_OBJECT_GROUP_ID = 9
AOV_SHADOW_CATCHER = 10
AOV_BACKGROUND = 11
AOV_EMISSION = 12
AOV_VELOCITY = 13
AOV_DIRECT_ILLUMINATION = 14
AOV_INDIRECT_ILLUMINATION = 15
AOV_AO = 16
AOV_DIRECT_DIFFUSE = 17
AOV_DIRECT_REFLECT = 18
AOV_INDIRECT_DIFFUSE = 19
AOV_INDIRECT_REFLECT = 20
AOV_REFRACT = 21
AOV_VOLUME = 22
AOV_LIGHT_GROUP0 = 23
AOV_LIGHT_GROUP1 = 24
AOV_LIGHT_GROUP2 = 25
AOV_LIGHT_GROUP3 = 26
AOV_DIFFUSE_ALBEDO = 27
AOV_VARIANCE = 28
AOV_VIEW_SHADING_NORMAL = 29
AOV_REFLECTION_CATCHER = 30
AOV_COLOR_RIGHT = 31
AOV_LPE_0 = 32
AOV_LPE_1 = 33
AOV_LPE_2 = 34
AOV_LPE_3 = 35
AOV_LPE_4 = 36
AOV_LPE_5 = 37
AOV_LPE_6 = 38
AOV_LPE_7 = 39
AOV_LPE_8 = 40
AOV_CAMERA_NORMAL = 41
AOV_CRYPTOMATTE_MAT0 = 48
AOV_CRYPTOMATTE_MAT1 = 49
AOV_CRYPTOMATTE_MAT2 = 50
AOV_CRYPTOMATTE_OBJ0 = 56
AOV_CRYPTOMATTE_OBJ1 = 57
AOV_CRYPTOMATTE_OBJ2 = 58
POST_EFFECT_TONE_MAP = 0
POST_EFFECT_WHITE_BALANCE = 1
POST_EFFECT_SIMPLE_TONEMAP = 2
POST_EFFECT_NORMALIZATION = 3
POST_EFFECT_GAMMA_CORRECTION = 4
POST_EFFECT_BLOOM = 5
COLOR_SPACE_SRGB = 1
COLOR_SPACE_ADOBE_RGB = 2
COLOR_SPACE_REC2020 = 3
COLOR_SPACE_DCIP3 = 4
MATERIAL_NODE_INPUT_TYPE_FLOAT4 = 1
MATERIAL_NODE_INPUT_TYPE_UINT = 2
MATERIAL_NODE_INPUT_TYPE_NODE = 3
MATERIAL_NODE_INPUT_TYPE_IMAGE = 4
MATERIAL_NODE_INPUT_TYPE_BUFFER = 5
SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER = 1
SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY = 2
IMAGE_WRAP_TYPE_REPEAT = 1
IMAGE_WRAP_TYPE_MIRRORED_REPEAT = 2
IMAGE_WRAP_TYPE_CLAMP_TO_EDGE = 3
IMAGE_WRAP_TYPE_CLAMP_ZERO = 5
IMAGE_WRAP_TYPE_CLAMP_ONE = 6
IMAGE_FILTER_TYPE_NEAREST = 1
IMAGE_FILTER_TYPE_LINEAR = 2
COMPOSITE_TYPE = 1
COMPOSITE_FRAMEBUFFER_INPUT_FB = 2
COMPOSITE_NORMALIZE_INPUT_COLOR = 3
COMPOSITE_NORMALIZE_INPUT_AOVTYPE = 4
COMPOSITE_CONSTANT_INPUT_VALUE = 5
COMPOSITE_LERP_VALUE_INPUT_COLOR0 = 6
COMPOSITE_LERP_VALUE_INPUT_COLOR1 = 7
COMPOSITE_LERP_VALUE_INPUT_WEIGHT = 8
COMPOSITE_ARITHMETIC_INPUT_COLOR0 = 9
COMPOSITE_ARITHMETIC_INPUT_COLOR1 = 10
COMPOSITE_ARITHMETIC_INPUT_OP = 11
COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR = 12
COMPOSITE_LUT_INPUT_LUT = 13
COMPOSITE_LUT_INPUT_COLOR = 14
COMPOSITE_NAME = OBJECT_NAME
COMPOSITE_UNIQUE_ID = OBJECT_UNIQUE_ID
COMPOSITE_CUSTOM_PTR = OBJECT_CUSTOM_PTR
COMPOSITE_ARITHMETIC = 1
COMPOSITE_LERP_VALUE = 2
COMPOSITE_INVERSE = 3
COMPOSITE_NORMALIZE = 4
COMPOSITE_GAMMA_CORRECTION = 5
COMPOSITE_EXPOSURE = 6
COMPOSITE_CONTRAST = 7
COMPOSITE_SIDE_BY_SIDE = 8
COMPOSITE_TONEMAP_ACES = 9
COMPOSITE_TONEMAP_REINHARD = 10
COMPOSITE_TONEMAP_LINEAR = 11
COMPOSITE_FRAMEBUFFER = 12
COMPOSITE_CONSTANT = 13
COMPOSITE_LUT = 14
GRID_SIZE_X = 2352
GRID_SIZE_Y = 2353
GRID_SIZE_Z = 2354
GRID_DATA = 2355
GRID_DATA_SIZEBYTE = 2356
GRID_INDICES = 2358
GRID_INDICES_NUMBER = 2359
GRID_INDICES_TOPOLOGY = 2360
GRID_NAME = OBJECT_NAME
GRID_UNIQUE_ID = OBJECT_UNIQUE_ID
GRID_CUSTOM_PTR = OBJECT_CUSTOM_PTR
HETEROVOLUME_TRANSFORM = 1845
HETEROVOLUME_ALBEDO_V2 = 1852
HETEROVOLUME_DENSITY_V2 = 1853
HETEROVOLUME_EMISSION_V2 = 1854
HETEROVOLUME_ALBEDO_LOOKUP_VALUES = 1855
HETEROVOLUME_ALBEDO_LOOKUP_VALUES_COUNT = 1856
HETEROVOLUME_DENSITY_LOOKUP_VALUES = 1857
HETEROVOLUME_DENSITY_LOOKUP_VALUES_COUNT = 1858
HETEROVOLUME_EMISSION_LOOKUP_VALUES = 1859
HETEROVOLUME_EMISSION_LOOKUP_VALUES_COUNT = 1860
HETEROVOLUME_ALBEDO_SCALE = 1861
HETEROVOLUME_DENSITY_SCALE = 1862
HETEROVOLUME_EMISSION_SCALE = 1863
HETEROVOLUME_NAME = OBJECT_NAME
HETEROVOLUME_UNIQUE_ID = OBJECT_UNIQUE_ID
HETEROVOLUME_CUSTOM_PTR = OBJECT_CUSTOM_PTR
GRID_INDICES_TOPOLOGY_I_U64 = 2384
GRID_INDICES_TOPOLOGY_XYZ_U32 = 2385
GRID_INDICES_TOPOLOGY_I_S64 = 2386
GRID_INDICES_TOPOLOGY_XYZ_S32 = 2387
CURVE_CONTROLPOINTS_COUNT = 2096
CURVE_CONTROLPOINTS_DATA = 2097
CURVE_CONTROLPOINTS_STRIDE = 2098
CURVE_INDICES_COUNT = 2099
CURVE_INDICES_DATA = 2100
CURVE_RADIUS = 2101
CURVE_UV = 2102
CURVE_COUNT_CURVE = 2103
CURVE_SEGMENTS_PER_CURVE = 2104
CURVE_CREATION_FLAG = 2105
CURVE_NAME = OBJECT_NAME
CURVE_UNIQUE_ID = OBJECT_UNIQUE_ID
CURVE_CUSTOM_PTR = OBJECT_CUSTOM_PTR
CURVE_TRANSFORM = SHAPE_TRANSFORM
CURVE_MATERIAL = SHAPE_MATERIAL
CURVE_VISIBILITY_PRIMARY_ONLY_FLAG = SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG
CURVE_VISIBILITY_SHADOW = SHAPE_VISIBILITY_SHADOW
CURVE_VISIBILITY_REFLECTION = SHAPE_VISIBILITY_REFLECTION
CURVE_VISIBILITY_REFRACTION = SHAPE_VISIBILITY_REFRACTION
CURVE_VISIBILITY_TRANSPARENT = SHAPE_VISIBILITY_TRANSPARENT
CURVE_VISIBILITY_DIFFUSE = SHAPE_VISIBILITY_DIFFUSE
CURVE_VISIBILITY_GLOSSY_REFLECTION = SHAPE_VISIBILITY_GLOSSY_REFLECTION
CURVE_VISIBILITY_GLOSSY_REFRACTION = SHAPE_VISIBILITY_GLOSSY_REFRACTION
CURVE_VISIBILITY_LIGHT = SHAPE_VISIBILITY_LIGHT
FALSE = 0
TRUE = 1
CL_CONTEXT = 12289
CL_DEVICE = 12290
CL_COMMAND_QUEUE = 12291
CL_MEM_OBJECT = 16385
INVALID_GL_SHAREGROUP_REFERENCE_KHR = -1000
GL_CONTEXT_KHR = 8193
EGL_DISPLAY_KHR = 8194
GLX_DISPLAY_KHR = 8195
WGL_HDC_KHR = 8196
CGL_SHAREGROUP_KHR = 8197
UBER_MATERIAL_LAYERS = 69632
MATERIAL_INPUT_CAST_SHADOW = 69633
UBER_MATERIAL_LAYER_EMISSION = 1
UBER_MATERIAL_LAYER_TRANSPARENCY = 2
UBER_MATERIAL_LAYER_COATING = 4
UBER_MATERIAL_LAYER_REFLECTION = 8
UBER_MATERIAL_LAYER_DIFFUSE = 16
UBER_MATERIAL_LAYER_REFRACTION = 32
UBER_MATERIAL_LAYER_SHADING_NORMAL = 64
MATERIAL_NODE_OP_CEIL = 4138
MATERIAL_NODE_OP_ROUND = 4139
MATERIAL_NODE_OP_SIGN = 4140
MATERIAL_NODE_OP_SQRT = 4143
MATERIAL_NODE_OP_LOG2 = 4144
MATERIAL_NODE_OP_LOG10 = 4145
MATERIAL_NODE_OP_TRUNCATE = 4146
MATERIAL_NODE_OP_SHUFFLE = 4147
MATERIAL_NODE_OP_SHUFFLE2 = 4148
MATERIAL_NODE_OP_CLAMP = 4149
MATERIAL_NODE_OP_SATURATE = 4150
MATERIAL_NODE_OP_IF = 4151
MATERIAL_NODE_OP_SAMPLER = 4096
MATERIAL_NODE_OP_SAMPLER_BUMPMAP = 4097
MATERIAL_NODE_OP_CONSTANT = 4098
MATERIAL_NODE_OP_LOOKUP = 4099
CONTEXT_CREATEPROP_HYBRID_KERNELS_PATH_INFO = 5632
CONTEXT_CREATEPROP_HYBRID_ACC_MEMORY_SIZE = 5633
CONTEXT_CREATEPROP_HYBRID_VERTEX_MEMORY_SIZE = 5634
CONTEXT_CREATEPROP_HYBRID_INDEX_MEMORY_SIZE = 5635
CONTEXT_CREATEPROP_HYBRID_STAGING_MEMORY_SIZE = 5636
CONTEXT_CREATEPROP_HYBRID_ENABLE_VCT = 5637
CONTEXT_CREATEPROP_HYBRID_ENABLE_PER_FACE_MATERIALS = 5638
CONTEXT_CREATEPROP_HYBRID_FACE_MEMORY_SIZE = 5639
CONTEXT_CREATEPROP_HYBRID_ENABLE_RADEON_RAYS = 5640
CONTEXT_RANDOM_SEED = 4096
CONTEXT_RENDER_QUALITY = 4097
CONTEXT_NUMBER_PRERENDERED_FRAMES = 4098
CONTEXT_SSAO_RADIUS = 4099
CONTEXT_SSAO_POWER = 4100
CONTEXT_TAA_ACCUMULATE_SAMPLES = 4102
CONTEXT_PT_UPSCALE_ENABLED = 4103
CONTEXT_PT_UPSCALE_FACTOR = 4104
CONTEXT_RTAO_UPSCALE_ENABLED = 4105
CONTEXT_RTAO_UPSCALE_FACTOR = 4106
CONTEXT_VCT_RESOLUTION = 4107
CONTEXT_PROGRESSIVE_LIGHT_BAKE_ENABLED = 4108
CONTEXT_AREA_LIGHT_SHADOWS_ENABLED = 4109
CONTEXT_SPOT_LIGHT_DEPTH_BIAS = 4110
CONTEXT_POINT_LIGHT_DEPTH_BIAS = 4111
CONTEXT_DIRECTIONAL_LIGHT_DEPTH_BIAS = 4112
CONTEXT_STEREO_RENDER = 4113
CONTEXT_HIERARCHICAL_LIGHT_SAMPLING_ENABLED = 4114
CONTEXT_ENABLE_ARITHMETICS = 4115
CONTEXT_NUMBER_CAMERA_JITTER_POINTS = 4116
CONTEXT_ENABLE_MSAA = 4117
CONTEXT_FOG_DENSITY = 4118
CONTEXT_FOG_MIE_G = 4119
CONTEXT_FOG_ENABLE_HALF_RESOLUTION = 4120
CONTEXT_FOG_ENABLE_VISIBILITY = 4121
CONTEXT_FOG_USE_DXR_VISIBILITY = 4122
CONTEXT_FOG_MAX_DISTANCE = 4123
CONTEXT_FOG_MAX_SCATTER_DISTANCE = 4124
CONTEXT_FOG_MAX_VIEW_SAMPLES = 4125
CONTEXT_HYBRID_TRAVERSAL_MODE = 4126
CONTEXT_USE_HALF_RES_SHADOWS = 4127
CONTEXT_USE_HALF_RES_AO = 4128
CONTEXT_USE_HALF_RES_REFLECTIONS = 4129
CONTEXT_ENABLE_RELAXED_MATERIAL_CHECKS = 4130
CONTEXT_IRRADIANCE_VOLUME_ENABLED = 4131
CONTEXT_IRRADIANCE_VOLUME_RESOLUTION_X = 4132
CONTEXT_IRRADIANCE_VOLUME_RESOLUTION_Y = 4133
CONTEXT_IRRADIANCE_VOLUME_RESOLUTION_Z = 4134
CONTEXT_IRRADIANCE_VOLUME_NUM_LODS = 4135
CONTEXT_IRRADIANCE_VOLUME_CELL_SIZE = 4136
CONTEXT_ENABLE_RAYTRACE_SHADOWS = 4137
CONTEXT_ENABLE_RAYTRACE_REFLECTION = 4138
CONTEXT_ENABLE_RAYTRACE_REFRACTION = 4139
CONTEXT_GLOBAL_ILLUMINATION_MODE = 4140
CONTEXT_PT_DENOISE_ENABLED = 4141
HYBRID_TRAVERSAL_STATIC_TLAS_SEPARATE = 1
HYBRID_TRAVERSAL_STATIC_TLAS_INSTANCES = 2
RENDER_QUALITY_LOW = 0
RENDER_QUALITY_MEDIUM = 1
RENDER_QUALITY_HIGH = 2
RENDER_QUALITY_ULTRA = 3
RENDER_QUALITY_CUSTOM = 4
GLOBAL_ILLUMINATION_SSAO = 0
GLOBAL_ILLUMINATION_IRRADIANCE_VOLUME = 1
GLOBAL_ILLUMINATION_PATH_TRACE_AO = 2
IMAGE_FILTER_TYPE_TRILINEAR = 4
IMAGE_FILTER_TYPE_ANISOTROPIC = 8
DIRECTIONAL_LIGHT_RASTER_NO_SHADOWS = 0
DIRECTIONAL_LIGHT_RASTER_SPLITS_AUTO = -1
DIRECTIONAL_LIGHT_RASTER_SPLITS_MAX = 4
CONTEXT_FRAMEBUFFERS_READY_SEMAPHORES = 24576
CONTEXT_INTEROP_SEMAPHORE_INDEX = 24577
SHAPE_LIGHTMAP_CHART_INDEX = 5184
MESH_IS_DYNAMIC_MESH = 1305
MESH_LOCAL_AABB = 1312
MESH_WORLD_AABB = 1313
_constants_names = ['VERSION_MAJOR', 'VERSION_MINOR', 'VERSION_REVISION', 'VERSION_BUILD', 'VERSION_MAJOR_MINOR_REVISION', 'API_VERSION', 'API_VERSION_MINOR', 'SUCCESS', 'ERROR_COMPUTE_API_NOT_SUPPORTED', 'ERROR_OUT_OF_SYSTEM_MEMORY', 'ERROR_OUT_OF_VIDEO_MEMORY', 'ERROR_INVALID_LIGHTPATH_EXPR', 'ERROR_INVALID_IMAGE', 'ERROR_INVALID_AA_METHOD', 'ERROR_UNSUPPORTED_IMAGE_FORMAT', 'ERROR_INVALID_GL_TEXTURE', 'ERROR_INVALID_CL_IMAGE', 'ERROR_INVALID_OBJECT', 'ERROR_INVALID_PARAMETER', 'ERROR_INVALID_TAG', 'ERROR_INVALID_LIGHT', 'ERROR_INVALID_CONTEXT', 'ERROR_UNIMPLEMENTED', 'ERROR_INVALID_API_VERSION', 'ERROR_INTERNAL_ERROR', 'ERROR_IO_ERROR', 'ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE', 'ERROR_MATERIAL_STACK_OVERFLOW', 'ERROR_INVALID_PARAMETER_TYPE', 'ERROR_UNSUPPORTED', 'ERROR_OPENCL_OUT_OF_HOST_MEMORY', 'ERROR_OPENGL', 'ERROR_OPENCL', 'ERROR_NULLPTR', 'ERROR_NODETYPE', 'ERROR_ABORTED', 'PARAMETER_TYPE_FLOAT', 'PARAMETER_TYPE_FLOAT2', 'PARAMETER_TYPE_FLOAT3', 'PARAMETER_TYPE_FLOAT4', 'PARAMETER_TYPE_IMAGE', 'PARAMETER_TYPE_STRING', 'PARAMETER_TYPE_SHADER', 'PARAMETER_TYPE_UINT', 'PARAMETER_TYPE_ULONG', 'PARAMETER_TYPE_LONGLONG', 'CREATION_FLAGS_ENABLE_GPU0', 'CREATION_FLAGS_ENABLE_GPU1', 'CREATION_FLAGS_ENABLE_GPU2', 'CREATION_FLAGS_ENABLE_GPU3', 'CREATION_FLAGS_ENABLE_CPU', 'CREATION_FLAGS_ENABLE_GL_INTEROP', 'CREATION_FLAGS_ENABLE_GPU4', 'CREATION_FLAGS_ENABLE_GPU5', 'CREATION_FLAGS_ENABLE_GPU6', 'CREATION_FLAGS_ENABLE_GPU7', 'CREATION_FLAGS_ENABLE_METAL', 'CREATION_FLAGS_ENABLE_GPU8', 'CREATION_FLAGS_ENABLE_GPU9', 'CREATION_FLAGS_ENABLE_GPU10', 'CREATION_FLAGS_ENABLE_GPU11', 'CREATION_FLAGS_ENABLE_GPU12', 'CREATION_FLAGS_ENABLE_GPU13', 'CREATION_FLAGS_ENABLE_GPU14', 'CREATION_FLAGS_ENABLE_GPU15', 'CREATION_FLAGS_ENABLE_DEBUG', 'FILTER_NONE', 'FILTER_BOX', 'FILTER_TRIANGLE', 'FILTER_GAUSSIAN', 'FILTER_MITCHELL', 'FILTER_LANCZOS', 'FILTER_BLACKMANHARRIS', 'CONTEXT_SAMPLER_TYPE_SOBOL', 'CONTEXT_SAMPLER_TYPE_RANDOM', 'CONTEXT_SAMPLER_TYPE_CMJ', 'SHAPE_TYPE_MESH', 'SHAPE_TYPE_INSTANCE', 'LIGHT_TYPE_POINT', 'LIGHT_TYPE_DIRECTIONAL', 'LIGHT_TYPE_SPOT', 'LIGHT_TYPE_ENVIRONMENT', 'LIGHT_TYPE_SKY', 'LIGHT_TYPE_IES', 'LIGHT_TYPE_SPHERE', 'LIGHT_TYPE_DISK', 'OBJECT_NAME', 'OBJECT_UNIQUE_ID', 'OBJECT_CUSTOM_PTR', 'CONTEXT_CREATION_FLAGS', 'CONTEXT_CACHE_PATH', 'CONTEXT_RENDER_STATUS', 'CONTEXT_RENDER_STATISTICS', 'CONTEXT_DEVICE_COUNT', 'CONTEXT_PARAMETER_COUNT', 'CONTEXT_ACTIVE_PLUGIN', 'CONTEXT_SCENE', 'CONTEXT_ITERATIONS', 'CONTEXT_IMAGE_FILTER_TYPE', 'CONTEXT_IMAGE_FILTER_BOX_RADIUS', 'CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS', 'CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS', 'CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS', 'CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS', 'CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS', 'CONTEXT_TONE_MAPPING_TYPE', 'CONTEXT_TONE_MAPPING_LINEAR_SCALE', 'CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY', 'CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE', 'CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP', 'CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE', 'CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE', 'CONTEXT_TONE_MAPPING_REINHARD02_BURN', 'CONTEXT_MAX_RECURSION', 'CONTEXT_RAY_CAST_EPISLON', 'CONTEXT_RADIANCE_CLAMP', 'CONTEXT_X_FLIP', 'CONTEXT_Y_FLIP', 'CONTEXT_TEXTURE_GAMMA', 'CONTEXT_PDF_THRESHOLD', 'CONTEXT_RENDER_MODE', 'CONTEXT_ROUGHNESS_CAP', 'CONTEXT_DISPLAY_GAMMA', 'CONTEXT_MATERIAL_STACK_SIZE', 'CONTEXT_CLIPPING_PLANE', 'CONTEXT_GPU0_NAME', 'CONTEXT_GPU1_NAME', 'CONTEXT_GPU2_NAME', 'CONTEXT_GPU3_NAME', 'CONTEXT_CPU_NAME', 'CONTEXT_GPU4_NAME', 'CONTEXT_GPU5_NAME', 'CONTEXT_GPU6_NAME', 'CONTEXT_GPU7_NAME', 'CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY', 'CONTEXT_FRAMECOUNT', 'CONTEXT_TEXTURE_COMPRESSION', 'CONTEXT_AO_RAY_LENGTH', 'CONTEXT_OOC_TEXTURE_CACHE', 'CONTEXT_PREVIEW', 'CONTEXT_CPU_THREAD_LIMIT', 'CONTEXT_LAST_ERROR_MESSAGE', 'CONTEXT_MAX_DEPTH_DIFFUSE', 'CONTEXT_MAX_DEPTH_GLOSSY', 'CONTEXT_OOC_CACHE_PATH', 'CONTEXT_MAX_DEPTH_REFRACTION', 'CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION', 'CONTEXT_RENDER_LAYER_MASK', 'CONTEXT_SINGLE_LEVEL_BVH_ENABLED', 'CONTEXT_TRANSPARENT_BACKGROUND', 'CONTEXT_MAX_DEPTH_SHADOW', 'CONTEXT_API_VERSION', 'CONTEXT_GPU8_NAME', 'CONTEXT_GPU9_NAME', 'CONTEXT_GPU10_NAME', 'CONTEXT_GPU11_NAME', 'CONTEXT_GPU12_NAME', 'CONTEXT_GPU13_NAME', 'CONTEXT_GPU14_NAME', 'CONTEXT_GPU15_NAME', 'CONTEXT_API_VERSION_MINOR', 'CONTEXT_METAL_PERFORMANCE_SHADER', 'CONTEXT_USER_TEXTURE_0', 'CONTEXT_USER_TEXTURE_1', 'CONTEXT_USER_TEXTURE_2', 'CONTEXT_USER_TEXTURE_3', 'CONTEXT_MIPMAP_LOD_OFFSET', 'CONTEXT_AO_RAY_COUNT', 'CONTEXT_SAMPLER_TYPE', 'CONTEXT_ADAPTIVE_SAMPLING_TILE_SIZE', 'CONTEXT_ADAPTIVE_SAMPLING_MIN_SPP', 'CONTEXT_ADAPTIVE_SAMPLING_THRESHOLD', 'CONTEXT_TILE_SIZE', 'CONTEXT_LIST_CREATED_CAMERAS', 'CONTEXT_LIST_CREATED_MATERIALNODES', 'CONTEXT_LIST_CREATED_LIGHTS', 'CONTEXT_LIST_CREATED_SHAPES', 'CONTEXT_LIST_CREATED_POSTEFFECTS', 'CONTEXT_LIST_CREATED_HETEROVOLUMES', 'CONTEXT_LIST_CREATED_GRIDS', 'CONTEXT_LIST_CREATED_BUFFERS', 'CONTEXT_LIST_CREATED_IMAGES', 'CONTEXT_LIST_CREATED_FRAMEBUFFERS', 'CONTEXT_LIST_CREATED_SCENES', 'CONTEXT_LIST_CREATED_CURVES', 'CONTEXT_LIST_CREATED_MATERIALSYSTEM', 'CONTEXT_LIST_CREATED_COMPOSITE', 'CONTEXT_LIST_CREATED_LUT', 'CONTEXT_AA_ENABLED', 'CONTEXT_ACTIVE_PIXEL_COUNT', 'CONTEXT_TRACING_ENABLED', 'CONTEXT_TRACING_PATH', 'CONTEXT_TILE_RECT', 'CONTEXT_PLUGIN_VERSION', 'CONTEXT_RUSSIAN_ROULETTE_DEPTH', 'CONTEXT_SHADOW_CATCHER_BAKING', 'CONTEXT_RENDER_UPDATE_CALLBACK_FUNC', 'CONTEXT_RENDER_UPDATE_CALLBACK_DATA', 'CONTEXT_COMPILE_CALLBACK_FUNC', 'CONTEXT_COMPILE_CALLBACK_DATA', 'CONTEXT_TEXTURE_CACHE_PATH', 'CONTEXT_OCIO_CONFIG_PATH', 'CONTEXT_OCIO_RENDERING_COLOR_SPACE', 'CONTEXT_CONTOUR_USE_OBJECTID', 'CONTEXT_CONTOUR_USE_MATERIALID', 'CONTEXT_CONTOUR_USE_NORMAL', 'CONTEXT_CONTOUR_NORMAL_THRESHOLD', 'CONTEXT_CONTOUR_LINEWIDTH_OBJECTID', 'CONTEXT_CONTOUR_LINEWIDTH_MATERIALID', 'CONTEXT_CONTOUR_LINEWIDTH_NORMAL', 'CONTEXT_CONTOUR_ANTIALIASING', 'CONTEXT_CONTOUR_DEBUG_ENABLED', 'CONTEXT_GPUINTEGRATOR', 'CONTEXT_CPUINTEGRATOR', 'CONTEXT_BEAUTY_MOTION_BLUR', 'CONTEXT_CAUSTICS_REDUCTION', 'CONTEXT_NAME', 'CONTEXT_UNIQUE_ID', 'CONTEXT_CUSTOM_PTR', 'CONTEXT_MAX', 'CAMERA_TRANSFORM', 'CAMERA_FSTOP', 'CAMERA_APERTURE_BLADES', 'CAMERA_RESPONSE', 'CAMERA_EXPOSURE', 'CAMERA_FOCAL_LENGTH', 'CAMERA_SENSOR_SIZE', 'CAMERA_MODE', 'CAMERA_ORTHO_WIDTH', 'CAMERA_ORTHO_HEIGHT', 'CAMERA_FOCUS_DISTANCE', 'CAMERA_POSITION', 'CAMERA_LOOKAT', 'CAMERA_UP', 'CAMERA_FOCAL_TILT', 'CAMERA_LENS_SHIFT', 'CAMERA_IPD', 'CAMERA_TILT_CORRECTION', 'CAMERA_NEAR_PLANE', 'CAMERA_FAR_PLANE', 'CAMERA_LINEAR_MOTION', 'CAMERA_ANGULAR_MOTION', 'CAMERA_NAME', 'CAMERA_UNIQUE_ID', 'CAMERA_CUSTOM_PTR', 'IMAGE_FORMAT', 'IMAGE_DESC', 'IMAGE_DATA', 'IMAGE_DATA_SIZEBYTE', 'IMAGE_WRAP', 'IMAGE_FILTER', 'IMAGE_GAMMA', 'IMAGE_MIPMAP_ENABLED', 'IMAGE_MIP_COUNT', 'IMAGE_GAMMA_FROM_FILE', 'IMAGE_UDIM', 'IMAGE_OCIO_COLORSPACE', 'IMAGE_INTERNAL_COMPRESSION', 'IMAGE_NAME', 'IMAGE_UNIQUE_ID', 'IMAGE_CUSTOM_PTR', 'BUFFER_DESC', 'BUFFER_DATA', 'BUFFER_NAME', 'BUFFER_UNIQUE_ID', 'BUFFER_CUSTOM_PTR', 'SHAPE_TYPE', 'SHAPE_VIDMEM_USAGE', 'SHAPE_TRANSFORM', 'SHAPE_MATERIAL', 'SHAPE_LINEAR_MOTION', 'SHAPE_ANGULAR_MOTION', 'SHAPE_SHADOW_FLAG', 'SHAPE_SUBDIVISION_FACTOR', 'SHAPE_DISPLACEMENT_SCALE', 'SHAPE_SHADOW_CATCHER_FLAG', 'SHAPE_VOLUME_MATERIAL', 'SHAPE_OBJECT_GROUP_ID', 'SHAPE_SUBDIVISION_CREASEWEIGHT', 'SHAPE_SUBDIVISION_BOUNDARYINTEROP', 'SHAPE_DISPLACEMENT_MATERIAL', 'SHAPE_MATERIALS_PER_FACE', 'SHAPE_SCALE_MOTION', 'SHAPE_HETERO_VOLUME', 'SHAPE_LAYER_MASK', 'SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG', 'SHAPE_VISIBILITY_SHADOW', 'SHAPE_VISIBILITY_REFLECTION', 'SHAPE_VISIBILITY_REFRACTION', 'SHAPE_VISIBILITY_TRANSPARENT', 'SHAPE_VISIBILITY_DIFFUSE', 'SHAPE_VISIBILITY_GLOSSY_REFLECTION', 'SHAPE_VISIBILITY_GLOSSY_REFRACTION', 'SHAPE_VISIBILITY_LIGHT', 'SHAPE_LIGHT_GROUP_ID', 'SHAPE_STATIC', 'SHAPE_PER_VERTEX_VALUE0', 'SHAPE_PER_VERTEX_VALUE1', 'SHAPE_PER_VERTEX_VALUE2', 'SHAPE_PER_VERTEX_VALUE3', 'SHAPE_REFLECTION_CATCHER_FLAG', 'SHAPE_OBJECT_ID', 'SHAPE_SUBDIVISION_AUTO_RATIO_CAP', 'SHAPE_MOTION_TRANSFORMS_COUNT', 'SHAPE_MOTION_TRANSFORMS', 'SHAPE_CONTOUR_IGNORE', 'SHAPE_NAME', 'SHAPE_UNIQUE_ID', 'SHAPE_CUSTOM_PTR', 'MESH_POLYGON_COUNT', 'MESH_VERTEX_COUNT', 'MESH_NORMAL_COUNT', 'MESH_UV_COUNT', 'MESH_VERTEX_ARRAY', 'MESH_NORMAL_ARRAY', 'MESH_UV_ARRAY', 'MESH_VERTEX_INDEX_ARRAY', 'MESH_NORMAL_INDEX_ARRAY', 'MESH_UV_INDEX_ARRAY', 'MESH_VERTEX_STRIDE', 'MESH_NORMAL_STRIDE', 'MESH_UV_STRIDE', 'MESH_VERTEX_INDEX_STRIDE', 'MESH_NORMAL_INDEX_STRIDE', 'MESH_UV_INDEX_STRIDE', 'MESH_NUM_FACE_VERTICES_ARRAY', 'MESH_UV2_COUNT', 'MESH_UV2_ARRAY', 'MESH_UV2_INDEX_ARRAY', 'MESH_UV2_STRIDE', 'MESH_UV2_INDEX_STRIDE', 'MESH_UV_DIM', 'SCENE_SHAPE_COUNT', 'SCENE_LIGHT_COUNT', 'SCENE_SHAPE_LIST', 'SCENE_LIGHT_LIST', 'SCENE_CAMERA', 'SCENE_CAMERA_RIGHT', 'SCENE_BACKGROUND_IMAGE', 'SCENE_AABB', 'SCENE_HETEROVOLUME_LIST', 'SCENE_HETEROVOLUME_COUNT', 'SCENE_CURVE_LIST', 'SCENE_CURVE_COUNT', 'SCENE_ENVIRONMENT_LIGHT', 'SCENE_NAME', 'SCENE_UNIQUE_ID', 'SCENE_CUSTOM_PTR', 'LUT_FILENAME', 'LUT_DATA', 'LIGHT_TYPE', 'LIGHT_TRANSFORM', 'LIGHT_GROUP_ID', 'LIGHT_NAME', 'LIGHT_UNIQUE_ID', 'LIGHT_CUSTOM_PTR', 'POINT_LIGHT_RADIANT_POWER', 'DIRECTIONAL_LIGHT_RADIANT_POWER', 'DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE', 'SPOT_LIGHT_RADIANT_POWER', 'SPOT_LIGHT_CONE_SHAPE', 'ENVIRONMENT_LIGHT_IMAGE', 'ENVIRONMENT_LIGHT_INTENSITY_SCALE', 'ENVIRONMENT_LIGHT_PORTAL_LIST', 'ENVIRONMENT_LIGHT_PORTAL_COUNT', 'ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION', 'ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION', 'ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY', 'ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND', 'SKY_LIGHT_TURBIDITY', 'SKY_LIGHT_ALBEDO', 'SKY_LIGHT_SCALE', 'SKY_LIGHT_DIRECTION', 'SKY_LIGHT_PORTAL_LIST', 'SKY_LIGHT_PORTAL_COUNT', 'IES_LIGHT_RADIANT_POWER', 'IES_LIGHT_IMAGE_DESC', 'SPHERE_LIGHT_RADIANT_POWER', 'SPHERE_LIGHT_RADIUS', 'DISK_LIGHT_RADIANT_POWER', 'DISK_LIGHT_RADIUS', 'DISK_LIGHT_ANGLE', 'PARAMETER_NAME', 'PARAMETER_TYPE', 'PARAMETER_DESCRIPTION', 'PARAMETER_VALUE', 'FRAMEBUFFER_FORMAT', 'FRAMEBUFFER_DESC', 'FRAMEBUFFER_DATA', 'FRAMEBUFFER_GL_TARGET', 'FRAMEBUFFER_GL_MIPLEVEL', 'FRAMEBUFFER_GL_TEXTURE', 'FRAMEBUFFER_LPE', 'FRAMEBUFFER_NAME', 'FRAMEBUFFER_UNIQUE_ID', 'FRAMEBUFFER_CUSTOM_PTR', 'INSTANCE_PARENT_SHAPE', 'COMPONENT_TYPE_UINT8', 'COMPONENT_TYPE_FLOAT16', 'COMPONENT_TYPE_FLOAT32', 'COMPONENT_TYPE_UNKNOWN', 'BUFFER_ELEMENT_TYPE_INT32', 'BUFFER_ELEMENT_TYPE_FLOAT32', 'RENDER_MODE_GLOBAL_ILLUMINATION', 'RENDER_MODE_DIRECT_ILLUMINATION', 'RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW', 'RENDER_MODE_WIREFRAME', 'RENDER_MODE_MATERIAL_INDEX', 'RENDER_MODE_POSITION', 'RENDER_MODE_NORMAL', 'RENDER_MODE_TEXCOORD', 'RENDER_MODE_AMBIENT_OCCLUSION', 'RENDER_MODE_DIFFUSE', 'CAMERA_MODE_PERSPECTIVE', 'CAMERA_MODE_ORTHOGRAPHIC', 'CAMERA_MODE_LATITUDE_LONGITUDE_360', 'CAMERA_MODE_LATITUDE_LONGITUDE_STEREO', 'CAMERA_MODE_CUBEMAP', 'CAMERA_MODE_CUBEMAP_STEREO', 'CAMERA_MODE_FISHEYE', 'TONEMAPPING_OPERATOR_NONE', 'TONEMAPPING_OPERATOR_LINEAR', 'TONEMAPPING_OPERATOR_PHOTOLINEAR', 'TONEMAPPING_OPERATOR_AUTOLINEAR', 'TONEMAPPING_OPERATOR_MAXWHITE', 'TONEMAPPING_OPERATOR_REINHARD02', 'TONEMAPPING_OPERATOR_EXPONENTIAL', 'VOLUME_TYPE_NONE', 'VOLUME_TYPE_HOMOGENEOUS', 'VOLUME_TYPE_HETEROGENEOUS', 'MATERIAL_SYSTEM_NODE_LIST', 'MATERIAL_NODE_TYPE', 'MATERIAL_NODE_SYSTEM', 'MATERIAL_NODE_INPUT_COUNT', 'MATERIAL_NODE_ID', 'MATERIAL_NODE_NAME', 'MATERIAL_NODE_UNIQUE_ID', 'MATERIAL_CUSTOM_PTR', 'MATERIAL_NODE_INPUT_NAME', 'MATERIAL_NODE_INPUT_DESCRIPTION', 'MATERIAL_NODE_INPUT_VALUE', 'MATERIAL_NODE_INPUT_TYPE', 'MATERIAL_NODE_DIFFUSE', 'MATERIAL_NODE_MICROFACET', 'MATERIAL_NODE_REFLECTION', 'MATERIAL_NODE_REFRACTION', 'MATERIAL_NODE_MICROFACET_REFRACTION', 'MATERIAL_NODE_TRANSPARENT', 'MATERIAL_NODE_EMISSIVE', 'MATERIAL_NODE_WARD', 'MATERIAL_NODE_ADD', 'MATERIAL_NODE_BLEND', 'MATERIAL_NODE_ARITHMETIC', 'MATERIAL_NODE_FRESNEL', 'MATERIAL_NODE_NORMAL_MAP', 'MATERIAL_NODE_IMAGE_TEXTURE', 'MATERIAL_NODE_NOISE2D_TEXTURE', 'MATERIAL_NODE_DOT_TEXTURE', 'MATERIAL_NODE_GRADIENT_TEXTURE', 'MATERIAL_NODE_CHECKER_TEXTURE', 'MATERIAL_NODE_CONSTANT_TEXTURE', 'MATERIAL_NODE_INPUT_LOOKUP', 'MATERIAL_NODE_BLEND_VALUE', 'MATERIAL_NODE_PASSTHROUGH', 'MATERIAL_NODE_ORENNAYAR', 'MATERIAL_NODE_FRESNEL_SCHLICK', 'MATERIAL_NODE_DIFFUSE_REFRACTION', 'MATERIAL_NODE_BUMP_MAP', 'MATERIAL_NODE_VOLUME', 'MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION', 'MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION', 'MATERIAL_NODE_TWOSIDED', 'MATERIAL_NODE_UV_PROCEDURAL', 'MATERIAL_NODE_MICROFACET_BECKMANN', 'MATERIAL_NODE_PHONG', 'MATERIAL_NODE_BUFFER_SAMPLER', 'MATERIAL_NODE_UV_TRIPLANAR', 'MATERIAL_NODE_AO_MAP', 'MATERIAL_NODE_USER_TEXTURE_0', 'MATERIAL_NODE_USER_TEXTURE_1', 'MATERIAL_NODE_USER_TEXTURE_2', 'MATERIAL_NODE_USER_TEXTURE_3', 'MATERIAL_NODE_UBERV2', 'MATERIAL_NODE_TRANSFORM', 'MATERIAL_NODE_RGB_TO_HSV', 'MATERIAL_NODE_HSV_TO_RGB', 'MATERIAL_NODE_MATX_DIFFUSE_BRDF', 'MATERIAL_NODE_MATX_DIELECTRIC_BRDF', 'MATERIAL_NODE_MATX_GENERALIZED_SCHLICK_BRDF', 'MATERIAL_NODE_MATX_NOISE3D', 'MATERIAL_NODE_MATX_TANGENT', 'MATERIAL_NODE_MATX_NORMAL', 'MATERIAL_NODE_MATX_POSITION', 'MATERIAL_NODE_MATX_ROUGHNESS_ANISOTROPY', 'MATERIAL_NODE_MATX_ROTATE3D', 'MATERIAL_NODE_MATX_NORMALIZE', 'MATERIAL_NODE_MATX_IFGREATER', 'MATERIAL_NODE_MATX_SHEEN_BRDF', 'MATERIAL_NODE_MATX_DIFFUSE_BTDF', 'MATERIAL_NODE_MATX_CONVERT', 'MATERIAL_NODE_MATX_SUBSURFACE_BRDF', 'MATERIAL_NODE_MATX_DIELECTRIC_BTDF', 'MATERIAL_NODE_MATX_CONDUCTOR_BRDF', 'MATERIAL_NODE_MATX_FRESNEL', 'MATERIAL_NODE_MATX_LUMINANCE', 'MATERIAL_NODE_MATX_FRACTAL3D', 'MATERIAL_NODE_MATX_MIX', 'MATERIAL_INPUT_COLOR', 'MATERIAL_INPUT_COLOR0', 'MATERIAL_INPUT_COLOR1', 'MATERIAL_INPUT_NORMAL', 'MATERIAL_INPUT_UV', 'MATERIAL_INPUT_DATA', 'MATERIAL_INPUT_ROUGHNESS', 'MATERIAL_INPUT_IOR', 'MATERIAL_INPUT_ROUGHNESS_X', 'MATERIAL_INPUT_ROUGHNESS_Y', 'MATERIAL_INPUT_ROTATION', 'MATERIAL_INPUT_WEIGHT', 'MATERIAL_INPUT_OP', 'MATERIAL_INPUT_INVEC', 'MATERIAL_INPUT_UV_SCALE', 'MATERIAL_INPUT_VALUE', 'MATERIAL_INPUT_REFLECTANCE', 'MATERIAL_INPUT_SCALE', 'MATERIAL_INPUT_SCATTERING', 'MATERIAL_INPUT_ABSORBTION', 'MATERIAL_INPUT_EMISSION', 'MATERIAL_INPUT_G', 'MATERIAL_INPUT_MULTISCATTER', 'MATERIAL_INPUT_COLOR2', 'MATERIAL_INPUT_COLOR3', 'MATERIAL_INPUT_ANISOTROPIC', 'MATERIAL_INPUT_FRONTFACE', 'MATERIAL_INPUT_BACKFACE', 'MATERIAL_INPUT_ORIGIN', 'MATERIAL_INPUT_ZAXIS', 'MATERIAL_INPUT_XAXIS', 'MATERIAL_INPUT_THRESHOLD', 'MATERIAL_INPUT_OFFSET', 'MATERIAL_INPUT_UV_TYPE', 'MATERIAL_INPUT_RADIUS', 'MATERIAL_INPUT_SIDE', 'MATERIAL_INPUT_CAUSTICS', 'MATERIAL_INPUT_TRANSMISSION_COLOR', 'MATERIAL_INPUT_THICKNESS', 'MATERIAL_INPUT_0', 'MATERIAL_INPUT_1', 'MATERIAL_INPUT_2', 'MATERIAL_INPUT_3', 'MATERIAL_INPUT_4', 'MATERIAL_INPUT_SCHLICK_APPROXIMATION', 'MATERIAL_INPUT_APPLYSURFACE', 'MATERIAL_INPUT_TANGENT', 'MATERIAL_INPUT_DISTRIBUTION', 'MATERIAL_INPUT_BASE', 'MATERIAL_INPUT_TINT', 'MATERIAL_INPUT_EXPONENT', 'MATERIAL_INPUT_AMPLITUDE', 'MATERIAL_INPUT_PIVOT', 'MATERIAL_INPUT_POSITION', 'MATERIAL_INPUT_AMOUNT', 'MATERIAL_INPUT_AXIS', 'MATERIAL_INPUT_LUMACOEFF', 'MATERIAL_INPUT_REFLECTIVITY', 'MATERIAL_INPUT_EDGE_COLOR', 'MATERIAL_INPUT_VIEW_DIRECTION', 'MATERIAL_INPUT_INTERIOR', 'MATERIAL_INPUT_OCTAVES', 'MATERIAL_INPUT_LACUNARITY', 'MATERIAL_INPUT_DIMINISH', 'MATERIAL_INPUT_WRAP_U', 'MATERIAL_INPUT_WRAP_V', 'MATERIAL_INPUT_WRAP_W', 'MATERIAL_INPUT_UBER_DIFFUSE_COLOR', 'MATERIAL_INPUT_UBER_DIFFUSE_WEIGHT', 'MATERIAL_INPUT_UBER_DIFFUSE_ROUGHNESS', 'MATERIAL_INPUT_UBER_DIFFUSE_NORMAL', 'MATERIAL_INPUT_UBER_REFLECTION_COLOR', 'MATERIAL_INPUT_UBER_REFLECTION_WEIGHT', 'MATERIAL_INPUT_UBER_REFLECTION_ROUGHNESS', 'MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY', 'MATERIAL_INPUT_UBER_REFLECTION_ANISOTROPY_ROTATION', 'MATERIAL_INPUT_UBER_REFLECTION_MODE', 'MATERIAL_INPUT_UBER_REFLECTION_IOR', 'MATERIAL_INPUT_UBER_REFLECTION_METALNESS', 'MATERIAL_INPUT_UBER_REFLECTION_NORMAL', 'MATERIAL_INPUT_UBER_REFLECTION_DIELECTRIC_REFLECTANCE', 'MATERIAL_INPUT_UBER_REFRACTION_COLOR', 'MATERIAL_INPUT_UBER_REFRACTION_WEIGHT', 'MATERIAL_INPUT_UBER_REFRACTION_ROUGHNESS', 'MATERIAL_INPUT_UBER_REFRACTION_IOR', 'MATERIAL_INPUT_UBER_REFRACTION_NORMAL', 'MATERIAL_INPUT_UBER_REFRACTION_THIN_SURFACE', 'MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_COLOR', 'MATERIAL_INPUT_UBER_REFRACTION_ABSORPTION_DISTANCE', 'MATERIAL_INPUT_UBER_REFRACTION_CAUSTICS', 'MATERIAL_INPUT_UBER_COATING_COLOR', 'MATERIAL_INPUT_UBER_COATING_WEIGHT', 'MATERIAL_INPUT_UBER_COATING_ROUGHNESS', 'MATERIAL_INPUT_UBER_COATING_MODE', 'MATERIAL_INPUT_UBER_COATING_IOR', 'MATERIAL_INPUT_UBER_COATING_METALNESS', 'MATERIAL_INPUT_UBER_COATING_NORMAL', 'MATERIAL_INPUT_UBER_COATING_TRANSMISSION_COLOR', 'MATERIAL_INPUT_UBER_COATING_THICKNESS', 'MATERIAL_INPUT_UBER_SHEEN', 'MATERIAL_INPUT_UBER_SHEEN_TINT', 'MATERIAL_INPUT_UBER_SHEEN_WEIGHT', 'MATERIAL_INPUT_UBER_EMISSION_COLOR', 'MATERIAL_INPUT_UBER_EMISSION_WEIGHT', 'MATERIAL_INPUT_UBER_EMISSION_MODE', 'MATERIAL_INPUT_UBER_TRANSPARENCY', 'MATERIAL_INPUT_UBER_SSS_SCATTER_COLOR', 'MATERIAL_INPUT_UBER_SSS_SCATTER_DISTANCE', 'MATERIAL_INPUT_UBER_SSS_SCATTER_DIRECTION', 'MATERIAL_INPUT_UBER_SSS_WEIGHT', 'MATERIAL_INPUT_UBER_SSS_MULTISCATTER', 'MATERIAL_INPUT_UBER_BACKSCATTER_WEIGHT', 'MATERIAL_INPUT_UBER_BACKSCATTER_COLOR', 'MATERIAL_INPUT_UBER_FRESNEL_SCHLICK_APPROXIMATION', 'MATERIAL_INPUT_RASTER_METALLIC', 'MATERIAL_INPUT_RASTER_ROUGHNESS', 'MATERIAL_INPUT_RASTER_SUBSURFACE', 'MATERIAL_INPUT_RASTER_ANISOTROPIC', 'MATERIAL_INPUT_RASTER_SPECULAR', 'MATERIAL_INPUT_RASTER_SPECULARTINT', 'MATERIAL_INPUT_RASTER_SHEEN', 'MATERIAL_INPUT_RASTER_SHEENTINT', 'MATERIAL_INPUT_RASTER_CLEARCOAT', 'MATERIAL_INPUT_RASTER_CLEARCOATGLOSS', 'MATERIAL_INPUT_RASTER_COLOR', 'MATERIAL_INPUT_RASTER_NORMAL', 'UBER_MATERIAL_IOR_MODE_PBR', 'UBER_MATERIAL_IOR_MODE_METALNESS', 'UBER_MATERIAL_EMISSION_MODE_SINGLESIDED', 'UBER_MATERIAL_EMISSION_MODE_DOUBLESIDED', 'MATERIAL_NODE_OP_ADD', 'MATERIAL_NODE_OP_SUB', 'MATERIAL_NODE_OP_MUL', 'MATERIAL_NODE_OP_DIV', 'MATERIAL_NODE_OP_SIN', 'MATERIAL_NODE_OP_COS', 'MATERIAL_NODE_OP_TAN', 'MATERIAL_NODE_OP_SELECT_X', 'MATERIAL_NODE_OP_SELECT_Y', 'MATERIAL_NODE_OP_SELECT_Z', 'MATERIAL_NODE_OP_COMBINE', 'MATERIAL_NODE_OP_DOT3', 'MATERIAL_NODE_OP_CROSS3', 'MATERIAL_NODE_OP_LENGTH3', 'MATERIAL_NODE_OP_NORMALIZE3', 'MATERIAL_NODE_OP_POW', 'MATERIAL_NODE_OP_ACOS', 'MATERIAL_NODE_OP_ASIN', 'MATERIAL_NODE_OP_ATAN', 'MATERIAL_NODE_OP_AVERAGE_XYZ', 'MATERIAL_NODE_OP_AVERAGE', 'MATERIAL_NODE_OP_MIN', 'MATERIAL_NODE_OP_MAX', 'MATERIAL_NODE_OP_FLOOR', 'MATERIAL_NODE_OP_MOD', 'MATERIAL_NODE_OP_ABS', 'MATERIAL_NODE_OP_SHUFFLE_YZWX', 'MATERIAL_NODE_OP_SHUFFLE_ZWXY', 'MATERIAL_NODE_OP_SHUFFLE_WXYZ', 'MATERIAL_NODE_OP_MAT_MUL', 'MATERIAL_NODE_OP_SELECT_W', 'MATERIAL_NODE_OP_DOT4', 'MATERIAL_NODE_OP_LOG', 'MATERIAL_NODE_OP_LOWER_OR_EQUAL', 'MATERIAL_NODE_OP_LOWER', 'MATERIAL_NODE_OP_GREATER_OR_EQUAL', 'MATERIAL_NODE_OP_GREATER', 'MATERIAL_NODE_OP_EQUAL', 'MATERIAL_NODE_OP_NOT_EQUAL', 'MATERIAL_NODE_OP_AND', 'MATERIAL_NODE_OP_OR', 'MATERIAL_NODE_OP_TERNARY', 'MATERIAL_NODE_LOOKUP_UV', 'MATERIAL_NODE_LOOKUP_N', 'MATERIAL_NODE_LOOKUP_P', 'MATERIAL_NODE_LOOKUP_INVEC', 'MATERIAL_NODE_LOOKUP_OUTVEC', 'MATERIAL_NODE_LOOKUP_UV1', 'MATERIAL_NODE_LOOKUP_P_LOCAL', 'MATERIAL_NODE_LOOKUP_VERTEX_VALUE0', 'MATERIAL_NODE_LOOKUP_VERTEX_VALUE1', 'MATERIAL_NODE_LOOKUP_VERTEX_VALUE2', 'MATERIAL_NODE_LOOKUP_VERTEX_VALUE3', 'MATERIAL_NODE_LOOKUP_SHAPE_RANDOM_COLOR', 'MATERIAL_NODE_LOOKUP_OBJECT_ID', 'MATERIAL_NODE_LOOKUP_PRIMITIVE_RANDOM_COLOR', 'MATERIAL_NODE_UVTYPE_PLANAR', 'MATERIAL_NODE_UVTYPE_CYLINDICAL', 'MATERIAL_NODE_UVTYPE_SPHERICAL', 'MATERIAL_NODE_UVTYPE_PROJECT', 'MATERIAL_NODE_TRANSFORM_ROTATE_LOCAL_TO_WORLD', 'POST_EFFECT_TYPE', 'POST_EFFECT_WHITE_BALANCE_COLOR_SPACE', 'POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE', 'POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE', 'POST_EFFECT_SIMPLE_TONEMAP_CONTRAST', 'POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP', 'POST_EFFECT_BLOOM_RADIUS', 'POST_EFFECT_BLOOM_THRESHOLD', 'POST_EFFECT_BLOOM_WEIGHT', 'POST_EFFECT_NAME', 'POST_EFFECT_UNIQUE_ID', 'POST_EFFECT_CUSTOM_PTR', 'AOV_COLOR', 'AOV_OPACITY', 'AOV_WORLD_COORDINATE', 'AOV_UV', 'AOV_MATERIAL_ID', 'AOV_GEOMETRIC_NORMAL', 'AOV_SHADING_NORMAL', 'AOV_DEPTH', 'AOV_OBJECT_ID', 'AOV_OBJECT_GROUP_ID', 'AOV_SHADOW_CATCHER', 'AOV_BACKGROUND', 'AOV_EMISSION', 'AOV_VELOCITY', 'AOV_DIRECT_ILLUMINATION', 'AOV_INDIRECT_ILLUMINATION', 'AOV_AO', 'AOV_DIRECT_DIFFUSE', 'AOV_DIRECT_REFLECT', 'AOV_INDIRECT_DIFFUSE', 'AOV_INDIRECT_REFLECT', 'AOV_REFRACT', 'AOV_VOLUME', 'AOV_LIGHT_GROUP0', 'AOV_LIGHT_GROUP1', 'AOV_LIGHT_GROUP2', 'AOV_LIGHT_GROUP3', 'AOV_DIFFUSE_ALBEDO', 'AOV_VARIANCE', 'AOV_VIEW_SHADING_NORMAL', 'AOV_REFLECTION_CATCHER', 'AOV_COLOR_RIGHT', 'AOV_LPE_0', 'AOV_LPE_1', 'AOV_LPE_2', 'AOV_LPE_3', 'AOV_LPE_4', 'AOV_LPE_5', 'AOV_LPE_6', 'AOV_LPE_7', 'AOV_LPE_8', 'AOV_CAMERA_NORMAL', 'AOV_CRYPTOMATTE_MAT0', 'AOV_CRYPTOMATTE_MAT1', 'AOV_CRYPTOMATTE_MAT2', 'AOV_CRYPTOMATTE_OBJ0', 'AOV_CRYPTOMATTE_OBJ1', 'AOV_CRYPTOMATTE_OBJ2', 'POST_EFFECT_TONE_MAP', 'POST_EFFECT_WHITE_BALANCE', 'POST_EFFECT_SIMPLE_TONEMAP', 'POST_EFFECT_NORMALIZATION', 'POST_EFFECT_GAMMA_CORRECTION', 'POST_EFFECT_BLOOM', 'COLOR_SPACE_SRGB', 'COLOR_SPACE_ADOBE_RGB', 'COLOR_SPACE_REC2020', 'COLOR_SPACE_DCIP3', 'MATERIAL_NODE_INPUT_TYPE_FLOAT4', 'MATERIAL_NODE_INPUT_TYPE_UINT', 'MATERIAL_NODE_INPUT_TYPE_NODE', 'MATERIAL_NODE_INPUT_TYPE_IMAGE', 'MATERIAL_NODE_INPUT_TYPE_BUFFER', 'SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER', 'SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY', 'IMAGE_WRAP_TYPE_REPEAT', 'IMAGE_WRAP_TYPE_MIRRORED_REPEAT', 'IMAGE_WRAP_TYPE_CLAMP_TO_EDGE', 'IMAGE_WRAP_TYPE_CLAMP_ZERO', 'IMAGE_WRAP_TYPE_CLAMP_ONE', 'IMAGE_FILTER_TYPE_NEAREST', 'IMAGE_FILTER_TYPE_LINEAR', 'COMPOSITE_TYPE', 'COMPOSITE_FRAMEBUFFER_INPUT_FB', 'COMPOSITE_NORMALIZE_INPUT_COLOR', 'COMPOSITE_NORMALIZE_INPUT_AOVTYPE', 'COMPOSITE_CONSTANT_INPUT_VALUE', 'COMPOSITE_LERP_VALUE_INPUT_COLOR0', 'COMPOSITE_LERP_VALUE_INPUT_COLOR1', 'COMPOSITE_LERP_VALUE_INPUT_WEIGHT', 'COMPOSITE_ARITHMETIC_INPUT_COLOR0', 'COMPOSITE_ARITHMETIC_INPUT_COLOR1', 'COMPOSITE_ARITHMETIC_INPUT_OP', 'COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR', 'COMPOSITE_LUT_INPUT_LUT', 'COMPOSITE_LUT_INPUT_COLOR', 'COMPOSITE_NAME', 'COMPOSITE_UNIQUE_ID', 'COMPOSITE_CUSTOM_PTR', 'COMPOSITE_ARITHMETIC', 'COMPOSITE_LERP_VALUE', 'COMPOSITE_INVERSE', 'COMPOSITE_NORMALIZE', 'COMPOSITE_GAMMA_CORRECTION', 'COMPOSITE_EXPOSURE', 'COMPOSITE_CONTRAST', 'COMPOSITE_SIDE_BY_SIDE', 'COMPOSITE_TONEMAP_ACES', 'COMPOSITE_TONEMAP_REINHARD', 'COMPOSITE_TONEMAP_LINEAR', 'COMPOSITE_FRAMEBUFFER', 'COMPOSITE_CONSTANT', 'COMPOSITE_LUT', 'GRID_SIZE_X', 'GRID_SIZE_Y', 'GRID_SIZE_Z', 'GRID_DATA', 'GRID_DATA_SIZEBYTE', 'GRID_INDICES', 'GRID_INDICES_NUMBER', 'GRID_INDICES_TOPOLOGY', 'GRID_NAME', 'GRID_UNIQUE_ID', 'GRID_CUSTOM_PTR', 'HETEROVOLUME_TRANSFORM', 'HETEROVOLUME_ALBEDO_V2', 'HETEROVOLUME_DENSITY_V2', 'HETEROVOLUME_EMISSION_V2', 'HETEROVOLUME_ALBEDO_LOOKUP_VALUES', 'HETEROVOLUME_ALBEDO_LOOKUP_VALUES_COUNT', 'HETEROVOLUME_DENSITY_LOOKUP_VALUES', 'HETEROVOLUME_DENSITY_LOOKUP_VALUES_COUNT', 'HETEROVOLUME_EMISSION_LOOKUP_VALUES', 'HETEROVOLUME_EMISSION_LOOKUP_VALUES_COUNT', 'HETEROVOLUME_ALBEDO_SCALE', 'HETEROVOLUME_DENSITY_SCALE', 'HETEROVOLUME_EMISSION_SCALE', 'HETEROVOLUME_NAME', 'HETEROVOLUME_UNIQUE_ID', 'HETEROVOLUME_CUSTOM_PTR', 'GRID_INDICES_TOPOLOGY_I_U64', 'GRID_INDICES_TOPOLOGY_XYZ_U32', 'GRID_INDICES_TOPOLOGY_I_S64', 'GRID_INDICES_TOPOLOGY_XYZ_S32', 'CURVE_CONTROLPOINTS_COUNT', 'CURVE_CONTROLPOINTS_DATA', 'CURVE_CONTROLPOINTS_STRIDE', 'CURVE_INDICES_COUNT', 'CURVE_INDICES_DATA', 'CURVE_RADIUS', 'CURVE_UV', 'CURVE_COUNT_CURVE', 'CURVE_SEGMENTS_PER_CURVE', 'CURVE_CREATION_FLAG', 'CURVE_NAME', 'CURVE_UNIQUE_ID', 'CURVE_CUSTOM_PTR', 'CURVE_TRANSFORM', 'CURVE_MATERIAL', 'CURVE_VISIBILITY_PRIMARY_ONLY_FLAG', 'CURVE_VISIBILITY_SHADOW', 'CURVE_VISIBILITY_REFLECTION', 'CURVE_VISIBILITY_REFRACTION', 'CURVE_VISIBILITY_TRANSPARENT', 'CURVE_VISIBILITY_DIFFUSE', 'CURVE_VISIBILITY_GLOSSY_REFLECTION', 'CURVE_VISIBILITY_GLOSSY_REFRACTION', 'CURVE_VISIBILITY_LIGHT', 'FALSE', 'TRUE', 'CL_CONTEXT', 'CL_DEVICE', 'CL_COMMAND_QUEUE', 'CL_MEM_OBJECT', 'INVALID_GL_SHAREGROUP_REFERENCE_KHR', 'GL_CONTEXT_KHR', 'EGL_DISPLAY_KHR', 'GLX_DISPLAY_KHR', 'WGL_HDC_KHR', 'CGL_SHAREGROUP_KHR', 'UBER_MATERIAL_LAYERS', 'MATERIAL_INPUT_CAST_SHADOW', 'UBER_MATERIAL_LAYER_EMISSION', 'UBER_MATERIAL_LAYER_TRANSPARENCY', 'UBER_MATERIAL_LAYER_COATING', 'UBER_MATERIAL_LAYER_REFLECTION', 'UBER_MATERIAL_LAYER_DIFFUSE', 'UBER_MATERIAL_LAYER_REFRACTION', 'UBER_MATERIAL_LAYER_SHADING_NORMAL', 'MATERIAL_NODE_OP_CEIL', 'MATERIAL_NODE_OP_ROUND', 'MATERIAL_NODE_OP_SIGN', 'MATERIAL_NODE_OP_SQRT', 'MATERIAL_NODE_OP_LOG2', 'MATERIAL_NODE_OP_LOG10', 'MATERIAL_NODE_OP_TRUNCATE', 'MATERIAL_NODE_OP_SHUFFLE', 'MATERIAL_NODE_OP_SHUFFLE2', 'MATERIAL_NODE_OP_CLAMP', 'MATERIAL_NODE_OP_SATURATE', 'MATERIAL_NODE_OP_IF', 'MATERIAL_NODE_OP_SAMPLER', 'MATERIAL_NODE_OP_SAMPLER_BUMPMAP', 'MATERIAL_NODE_OP_CONSTANT', 'MATERIAL_NODE_OP_LOOKUP', 'CONTEXT_CREATEPROP_HYBRID_KERNELS_PATH_INFO', 'CONTEXT_CREATEPROP_HYBRID_ACC_MEMORY_SIZE', 'CONTEXT_CREATEPROP_HYBRID_VERTEX_MEMORY_SIZE', 'CONTEXT_CREATEPROP_HYBRID_INDEX_MEMORY_SIZE', 'CONTEXT_CREATEPROP_HYBRID_STAGING_MEMORY_SIZE', 'CONTEXT_CREATEPROP_HYBRID_ENABLE_VCT', 'CONTEXT_CREATEPROP_HYBRID_ENABLE_PER_FACE_MATERIALS', 'CONTEXT_CREATEPROP_HYBRID_FACE_MEMORY_SIZE', 'CONTEXT_CREATEPROP_HYBRID_ENABLE_RADEON_RAYS', 'CONTEXT_RANDOM_SEED', 'CONTEXT_RENDER_QUALITY', 'CONTEXT_NUMBER_PRERENDERED_FRAMES', 'CONTEXT_SSAO_RADIUS', 'CONTEXT_SSAO_POWER', 'CONTEXT_TAA_ACCUMULATE_SAMPLES', 'CONTEXT_PT_UPSCALE_ENABLED', 'CONTEXT_PT_UPSCALE_FACTOR', 'CONTEXT_RTAO_UPSCALE_ENABLED', 'CONTEXT_RTAO_UPSCALE_FACTOR', 'CONTEXT_VCT_RESOLUTION', 'CONTEXT_PROGRESSIVE_LIGHT_BAKE_ENABLED', 'CONTEXT_AREA_LIGHT_SHADOWS_ENABLED', 'CONTEXT_SPOT_LIGHT_DEPTH_BIAS', 'CONTEXT_POINT_LIGHT_DEPTH_BIAS', 'CONTEXT_DIRECTIONAL_LIGHT_DEPTH_BIAS', 'CONTEXT_STEREO_RENDER', 'CONTEXT_HIERARCHICAL_LIGHT_SAMPLING_ENABLED', 'CONTEXT_ENABLE_ARITHMETICS', 'CONTEXT_NUMBER_CAMERA_JITTER_POINTS', 'CONTEXT_ENABLE_MSAA', 'CONTEXT_FOG_DENSITY', 'CONTEXT_FOG_MIE_G', 'CONTEXT_FOG_ENABLE_HALF_RESOLUTION', 'CONTEXT_FOG_ENABLE_VISIBILITY', 'CONTEXT_FOG_USE_DXR_VISIBILITY', 'CONTEXT_FOG_MAX_DISTANCE', 'CONTEXT_FOG_MAX_SCATTER_DISTANCE', 'CONTEXT_FOG_MAX_VIEW_SAMPLES', 'CONTEXT_HYBRID_TRAVERSAL_MODE', 'CONTEXT_USE_HALF_RES_SHADOWS', 'CONTEXT_USE_HALF_RES_AO', 'CONTEXT_USE_HALF_RES_REFLECTIONS', 'CONTEXT_ENABLE_RELAXED_MATERIAL_CHECKS', 'CONTEXT_IRRADIANCE_VOLUME_ENABLED', 'CONTEXT_IRRADIANCE_VOLUME_RESOLUTION_X', 'CONTEXT_IRRADIANCE_VOLUME_RESOLUTION_Y', 'CONTEXT_IRRADIANCE_VOLUME_RESOLUTION_Z', 'CONTEXT_IRRADIANCE_VOLUME_NUM_LODS', 'CONTEXT_IRRADIANCE_VOLUME_CELL_SIZE', 'CONTEXT_ENABLE_RAYTRACE_SHADOWS', 'CONTEXT_ENABLE_RAYTRACE_REFLECTION', 'CONTEXT_ENABLE_RAYTRACE_REFRACTION', 'CONTEXT_GLOBAL_ILLUMINATION_MODE', 'CONTEXT_PT_DENOISE_ENABLED', 'HYBRID_TRAVERSAL_STATIC_TLAS_SEPARATE', 'HYBRID_TRAVERSAL_STATIC_TLAS_INSTANCES', 'RENDER_QUALITY_LOW', 'RENDER_QUALITY_MEDIUM', 'RENDER_QUALITY_HIGH', 'RENDER_QUALITY_ULTRA', 'RENDER_QUALITY_CUSTOM', 'GLOBAL_ILLUMINATION_SSAO', 'GLOBAL_ILLUMINATION_IRRADIANCE_VOLUME', 'GLOBAL_ILLUMINATION_PATH_TRACE_AO', 'IMAGE_FILTER_TYPE_TRILINEAR', 'IMAGE_FILTER_TYPE_ANISOTROPIC', 'DIRECTIONAL_LIGHT_RASTER_NO_SHADOWS', 'DIRECTIONAL_LIGHT_RASTER_SPLITS_AUTO', 'DIRECTIONAL_LIGHT_RASTER_SPLITS_MAX', 'CONTEXT_FRAMEBUFFERS_READY_SEMAPHORES', 'CONTEXT_INTEROP_SEMAPHORE_INDEX', 'SHAPE_LIGHTMAP_CHART_INDEX', 'MESH_IS_DYNAMIC_MESH', 'MESH_LOCAL_AABB', 'MESH_WORLD_AABB']
_types_names = ['GLenum', 'GLint', 'GLuint', 'bool', 'char', 'double', 'float', 'int', 'long', 'longlong', 'short', 'uchar', 'uint', 'ulong', 'ushort', '_framebuffer_desc', '_image_desc', '_render_statistics', 'aa_filter', 'aov', 'bitfield', 'buffer', 'buffer_element_type', 'buffer_info', 'camera', 'camera_info', 'camera_mode', 'channel_order', 'channel_type', 'cl_command_queue', 'cl_context', 'cl_device', 'cl_mem', 'color_space', 'component_type', 'composite', 'composite_info', 'composite_type', 'context', 'context_info', 'context_properties', 'context_sampler_type', 'context_type', 'curve', 'curve_parameter', 'environment_override', 'framebuffer', 'framebuffer_info', 'gl_object_type', 'gl_platform_info', 'gl_texture_info', 'grid', 'grid_indices_topology', 'grid_parameter', 'hetero_volume', 'hetero_volume_parameter', 'image', 'image_filter_type', 'image_info', 'image_option', 'image_wrap_type', 'light', 'light_info', 'light_type', 'lut', 'lut_info', 'material_input_raster', 'material_node', 'material_node_arithmetic_operation', 'material_node_info', 'material_node_input', 'material_node_input_info', 'material_node_input_type', 'material_node_lookup_value', 'material_node_transform_op', 'material_node_type', 'material_node_uvtype_value', 'material_system', 'material_system_info', 'material_system_type', 'mesh_info', 'parameter_info', 'parameter_type', 'post_effect', 'post_effect_info', 'post_effect_type', 'render_mode', 'scene', 'scene_info', 'shape', 'shape_info', 'shape_type', 'status', 'subdiv_boundary_interfop_type', 'tonemapping_operator', 'ubermaterial_emission_mode', 'ubermaterial_ior_mode', 'volume_type', '_buffer_desc', '_framebuffer_format', '_image_format', 'creation_flags', 'framebuffer_desc', 'image_desc', 'render_statistics', '_ies_image_desc', 'buffer_desc', 'framebuffer_format', 'image_format', 'ies_image_desc']
def BufferGetInfo(buffer, buffer_info, size, data, size_ret):
    return lib.rprBufferGetInfo(buffer._get_handle() if buffer else ffi.NULL, buffer_info, size, data, size_ret)

def CameraGetInfo(camera, camera_info, size, data, size_ret):
    return lib.rprCameraGetInfo(camera._get_handle() if camera else ffi.NULL, camera_info, size, data, size_ret)

def CameraLookAt(camera, posx, posy, posz, atx, aty, atz, upx, upy, upz):
    return lib.rprCameraLookAt(camera._get_handle() if camera else ffi.NULL, posx, posy, posz, atx, aty, atz, upx, upy, upz)

def CameraSetAngularMotion(camera, x, y, z, w):
    return lib.rprCameraSetAngularMotion(camera._get_handle() if camera else ffi.NULL, x, y, z, w)

def CameraSetApertureBlades(camera, num_blades):
    return lib.rprCameraSetApertureBlades(camera._get_handle() if camera else ffi.NULL, num_blades)

def CameraSetExposure(camera, exposure):
    return lib.rprCameraSetExposure(camera._get_handle() if camera else ffi.NULL, exposure)

def CameraSetFStop(camera, fstop):
    return lib.rprCameraSetFStop(camera._get_handle() if camera else ffi.NULL, fstop)

def CameraSetFarPlane(camera, far):
    return lib.rprCameraSetFarPlane(camera._get_handle() if camera else ffi.NULL, far)

def CameraSetFocalLength(camera, flength):
    return lib.rprCameraSetFocalLength(camera._get_handle() if camera else ffi.NULL, flength)

def CameraSetFocalTilt(camera, tilt):
    return lib.rprCameraSetFocalTilt(camera._get_handle() if camera else ffi.NULL, tilt)

def CameraSetFocusDistance(camera, fdist):
    return lib.rprCameraSetFocusDistance(camera._get_handle() if camera else ffi.NULL, fdist)

def CameraSetIPD(camera, ipd):
    return lib.rprCameraSetIPD(camera._get_handle() if camera else ffi.NULL, ipd)

def CameraSetLensShift(camera, shiftx, shifty):
    return lib.rprCameraSetLensShift(camera._get_handle() if camera else ffi.NULL, shiftx, shifty)

def CameraSetLinearMotion(camera, x, y, z):
    return lib.rprCameraSetLinearMotion(camera._get_handle() if camera else ffi.NULL, x, y, z)

def CameraSetMode(camera, mode):
    return lib.rprCameraSetMode(camera._get_handle() if camera else ffi.NULL, mode)

def CameraSetNearPlane(camera, near):
    return lib.rprCameraSetNearPlane(camera._get_handle() if camera else ffi.NULL, near)

def CameraSetOrthoHeight(camera, height):
    return lib.rprCameraSetOrthoHeight(camera._get_handle() if camera else ffi.NULL, height)

def CameraSetOrthoWidth(camera, width):
    return lib.rprCameraSetOrthoWidth(camera._get_handle() if camera else ffi.NULL, width)

def CameraSetSensorSize(camera, width, height):
    return lib.rprCameraSetSensorSize(camera._get_handle() if camera else ffi.NULL, width, height)

def CameraSetTiltCorrection(camera, tiltX, tiltY):
    return lib.rprCameraSetTiltCorrection(camera._get_handle() if camera else ffi.NULL, tiltX, tiltY)

def CameraSetTransform(camera, transpose, transform):
    return lib.rprCameraSetTransform(camera._get_handle() if camera else ffi.NULL, transpose, transform)

def CompositeCompute(composite, fb):
    return lib.rprCompositeCompute(composite._get_handle() if composite else ffi.NULL, fb._get_handle() if fb else ffi.NULL)

def CompositeGetInfo(composite, composite_info, size, data, size_ret):
    return lib.rprCompositeGetInfo(composite._get_handle() if composite else ffi.NULL, composite_info, size, data, size_ret)

def CompositeSetInput1u(composite, inputName, value):
    return lib.rprCompositeSetInput1u(composite._get_handle() if composite else ffi.NULL, inputName, value)

def CompositeSetInput4f(composite, inputName, x, y, z, w):
    return lib.rprCompositeSetInput4f(composite._get_handle() if composite else ffi.NULL, inputName, x, y, z, w)

def CompositeSetInputC(composite, inputName, input):
    return lib.rprCompositeSetInputC(composite._get_handle() if composite else ffi.NULL, inputName, input._get_handle() if input else ffi.NULL)

def CompositeSetInputFb(composite, inputName, input):
    return lib.rprCompositeSetInputFb(composite._get_handle() if composite else ffi.NULL, inputName, input._get_handle() if input else ffi.NULL)

def CompositeSetInputLUT(composite, inputName, input):
    return lib.rprCompositeSetInputLUT(composite._get_handle() if composite else ffi.NULL, inputName, input)

def CompositeSetInputOp(composite, inputName, op):
    return lib.rprCompositeSetInputOp(composite._get_handle() if composite else ffi.NULL, inputName, op)

def ContextAbortRender(context):
    return lib.rprContextAbortRender(context._get_handle() if context else ffi.NULL)

def ContextAttachPostEffect(context, effect):
    return lib.rprContextAttachPostEffect(context._get_handle() if context else ffi.NULL, effect._get_handle() if effect else ffi.NULL)

def ContextClearMemory(context):
    return lib.rprContextClearMemory(context._get_handle() if context else ffi.NULL)

def ContextCreateBuffer(context, buffer_desc, data, out_buffer):
    return lib.rprContextCreateBuffer(context._get_handle() if context else ffi.NULL, buffer_desc, data, out_buffer._handle_ptr if out_buffer else ffi.NULL)

def ContextCreateCamera(context, out_camera):
    return lib.rprContextCreateCamera(context._get_handle() if context else ffi.NULL, out_camera._handle_ptr if out_camera else ffi.NULL)

def ContextCreateComposite(context, in_type, out_composite):
    return lib.rprContextCreateComposite(context._get_handle() if context else ffi.NULL, in_type, out_composite._handle_ptr if out_composite else ffi.NULL)

def ContextCreateCurve(context, out_curve, num_controlPoints, controlPointsData, controlPointsStride, num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve, creationFlag_tapered):
    return lib.rprContextCreateCurve(context._get_handle() if context else ffi.NULL, out_curve._handle_ptr if out_curve else ffi.NULL, num_controlPoints, controlPointsData, controlPointsStride, num_indices, curveCount, indicesData, radius, textureUV, segmentPerCurve, creationFlag_tapered)

def ContextCreateDirectionalLight(context, out_light):
    return lib.rprContextCreateDirectionalLight(context._get_handle() if context else ffi.NULL, out_light._handle_ptr if out_light else ffi.NULL)

def ContextCreateDiskLight(context, light):
    return lib.rprContextCreateDiskLight(context._get_handle() if context else ffi.NULL, light._handle_ptr if light else ffi.NULL)

def ContextCreateEnvironmentLight(context, out_light):
    return lib.rprContextCreateEnvironmentLight(context._get_handle() if context else ffi.NULL, out_light._handle_ptr if out_light else ffi.NULL)

def ContextCreateFrameBuffer(context, format, fb_desc, out_fb):
    return lib.rprContextCreateFrameBuffer(context._get_handle() if context else ffi.NULL, format, fb_desc, out_fb._handle_ptr if out_fb else ffi.NULL)

def ContextCreateFramebufferFromGLTexture2D(context, target, miplevel, texture, out_fb):
    return lib.rprContextCreateFramebufferFromGLTexture2D(context._get_handle() if context else ffi.NULL, target, miplevel, texture, out_fb._handle_ptr if out_fb else ffi.NULL)

def ContextCreateGrid(context, out_grid, gridSizeX, gridSizeY, gridSizeZ, indicesList, numberOfIndices, indicesListTopology, gridData, gridDataSizeByte, gridDataTopology___unused):
    return lib.rprContextCreateGrid(context._get_handle() if context else ffi.NULL, out_grid._handle_ptr if out_grid else ffi.NULL, gridSizeX, gridSizeY, gridSizeZ, indicesList, numberOfIndices, indicesListTopology, gridData, gridDataSizeByte, gridDataTopology___unused)

def ContextCreateHeteroVolume(context, out_heteroVolume):
    return lib.rprContextCreateHeteroVolume(context._get_handle() if context else ffi.NULL, out_heteroVolume._handle_ptr if out_heteroVolume else ffi.NULL)

def ContextCreateIESLight(context, light):
    return lib.rprContextCreateIESLight(context._get_handle() if context else ffi.NULL, light._handle_ptr if light else ffi.NULL)

def ContextCreateImage(context, format, image_desc, data, out_image):
    return lib.rprContextCreateImage(context._get_handle() if context else ffi.NULL, format, image_desc, data, out_image._handle_ptr if out_image else ffi.NULL)

def ContextCreateImageFromFile(context, path, out_image):
    return lib.rprContextCreateImageFromFile(context._get_handle() if context else ffi.NULL, path, out_image._handle_ptr if out_image else ffi.NULL)

def ContextCreateImageFromFileMemory(context, extension, data, dataSizeByte, out_image):
    return lib.rprContextCreateImageFromFileMemory(context._get_handle() if context else ffi.NULL, extension, data, dataSizeByte, out_image._handle_ptr if out_image else ffi.NULL)

def ContextCreateInstance(context, shape, out_instance):
    return lib.rprContextCreateInstance(context._get_handle() if context else ffi.NULL, shape._get_handle() if shape else ffi.NULL, out_instance._handle_ptr if out_instance else ffi.NULL)

def ContextCreateLUTFromData(context, lutData, out_lut):
    return lib.rprContextCreateLUTFromData(context._get_handle() if context else ffi.NULL, lutData, out_lut)

def ContextCreateLUTFromFile(context, fileLutPath, out_lut):
    return lib.rprContextCreateLUTFromFile(context._get_handle() if context else ffi.NULL, fileLutPath, out_lut)

def ContextCreateMaterialSystem(in_context, type, out_matsys):
    return lib.rprContextCreateMaterialSystem(in_context._get_handle() if in_context else ffi.NULL, type, out_matsys._handle_ptr if out_matsys else ffi.NULL)

def ContextCreateMesh(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh):
    return lib.rprContextCreateMesh(context._get_handle() if context else ffi.NULL, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh._handle_ptr if out_mesh else ffi.NULL)

def ContextCreateMeshEx(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh):
    return lib.rprContextCreateMeshEx(context._get_handle() if context else ffi.NULL, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, out_mesh._handle_ptr if out_mesh else ffi.NULL)

def ContextCreateMeshEx2(context, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, mesh_properties, out_mesh):
    return lib.rprContextCreateMeshEx2(context._get_handle() if context else ffi.NULL, vertices, num_vertices, vertex_stride, normals, num_normals, normal_stride, perVertexFlag, num_perVertexFlags, perVertexFlag_stride, numberOfTexCoordLayers, texcoords, num_texcoords, texcoord_stride, vertex_indices, vidx_stride, normal_indices, nidx_stride, texcoord_indices, tidx_stride, num_face_vertices, num_faces, mesh_properties, out_mesh._handle_ptr if out_mesh else ffi.NULL)

def ContextCreatePointLight(context, out_light):
    return lib.rprContextCreatePointLight(context._get_handle() if context else ffi.NULL, out_light._handle_ptr if out_light else ffi.NULL)

def ContextCreatePostEffect(context, type, out_effect):
    return lib.rprContextCreatePostEffect(context._get_handle() if context else ffi.NULL, type, out_effect._handle_ptr if out_effect else ffi.NULL)

def ContextCreateScene(context, out_scene):
    return lib.rprContextCreateScene(context._get_handle() if context else ffi.NULL, out_scene._handle_ptr if out_scene else ffi.NULL)

def ContextCreateSkyLight(context, out_light):
    return lib.rprContextCreateSkyLight(context._get_handle() if context else ffi.NULL, out_light._handle_ptr if out_light else ffi.NULL)

def ContextCreateSphereLight(context, light):
    return lib.rprContextCreateSphereLight(context._get_handle() if context else ffi.NULL, light._handle_ptr if light else ffi.NULL)

def ContextCreateSpotLight(context, light):
    return lib.rprContextCreateSpotLight(context._get_handle() if context else ffi.NULL, light._handle_ptr if light else ffi.NULL)

def ContextDetachPostEffect(context, effect):
    return lib.rprContextDetachPostEffect(context._get_handle() if context else ffi.NULL, effect._get_handle() if effect else ffi.NULL)

def ContextGetAOV(context, aov, out_fb):
    return lib.rprContextGetAOV(context._get_handle() if context else ffi.NULL, aov, out_fb._handle_ptr if out_fb else ffi.NULL)

def ContextGetAttachedPostEffect(context, i, out_effect):
    return lib.rprContextGetAttachedPostEffect(context._get_handle() if context else ffi.NULL, i, out_effect._handle_ptr if out_effect else ffi.NULL)

def ContextGetAttachedPostEffectCount(context, nb):
    return lib.rprContextGetAttachedPostEffectCount(context._get_handle() if context else ffi.NULL, nb)

def ContextGetFunctionPtr(context, function_name, out_function_ptr):
    return lib.rprContextGetFunctionPtr(context._get_handle() if context else ffi.NULL, function_name, out_function_ptr)

def ContextGetInfo(context, context_info, size, data, size_ret):
    return lib.rprContextGetInfo(context._get_handle() if context else ffi.NULL, context_info, size, data, size_ret)

def ContextGetInternalParameter1u(context, pluginIndex, paramName, x):
    return lib.rprContextGetInternalParameter1u(context._get_handle() if context else ffi.NULL, pluginIndex, paramName, x)

def ContextGetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w):
    return lib.rprContextGetInternalParameter4f(context._get_handle() if context else ffi.NULL, pluginIndex, paramName, x, y, z, w)

def ContextGetInternalParameterBuffer(context, pluginIndex, paramName, bufferSizeByte, buffer, size_ret):
    return lib.rprContextGetInternalParameterBuffer(context._get_handle() if context else ffi.NULL, pluginIndex, paramName, bufferSizeByte, buffer, size_ret)

def ContextGetParameterInfo(context, param_idx, parameter_info, size, data, size_ret):
    return lib.rprContextGetParameterInfo(context._get_handle() if context else ffi.NULL, param_idx, parameter_info, size, data, size_ret)

def ContextGetScene(arg0, out_scene):
    return lib.rprContextGetScene(arg0._get_handle() if arg0 else ffi.NULL, out_scene._handle_ptr if out_scene else ffi.NULL)

def ContextRender(context):
    return lib.rprContextRender(context._get_handle() if context else ffi.NULL)

def ContextRenderTile(context, xmin, xmax, ymin, ymax):
    return lib.rprContextRenderTile(context._get_handle() if context else ffi.NULL, xmin, xmax, ymin, ymax)

def ContextResolveFrameBuffer(context, src_frame_buffer, dst_frame_buffer, normalizeOnly):
    return lib.rprContextResolveFrameBuffer(context._get_handle() if context else ffi.NULL, src_frame_buffer._get_handle() if src_frame_buffer else ffi.NULL, dst_frame_buffer._get_handle() if dst_frame_buffer else ffi.NULL, normalizeOnly)

def ContextSetAOV(context, aov, frame_buffer):
    return lib.rprContextSetAOV(context._get_handle() if context else ffi.NULL, aov, frame_buffer._get_handle() if frame_buffer else ffi.NULL)

def ContextSetAOVindexLookup(context, key, colorR, colorG, colorB, colorA):
    return lib.rprContextSetAOVindexLookup(context._get_handle() if context else ffi.NULL, key, colorR, colorG, colorB, colorA)

def ContextSetActivePlugin(context, pluginID):
    return lib.rprContextSetActivePlugin(context._get_handle() if context else ffi.NULL, pluginID)

def ContextSetInternalParameter1u(context, pluginIndex, paramName, x):
    return lib.rprContextSetInternalParameter1u(context._get_handle() if context else ffi.NULL, pluginIndex, paramName, x)

def ContextSetInternalParameter4f(context, pluginIndex, paramName, x, y, z, w):
    return lib.rprContextSetInternalParameter4f(context._get_handle() if context else ffi.NULL, pluginIndex, paramName, x, y, z, w)

def ContextSetInternalParameterBuffer(context, pluginIndex, paramName, buffer, bufferSizeByte):
    return lib.rprContextSetInternalParameterBuffer(context._get_handle() if context else ffi.NULL, pluginIndex, paramName, buffer, bufferSizeByte)

def ContextSetParameterByKey1f(context, in_input, x):
    return lib.rprContextSetParameterByKey1f(context._get_handle() if context else ffi.NULL, in_input, x)

def ContextSetParameterByKey1u(context, in_input, x):
    return lib.rprContextSetParameterByKey1u(context._get_handle() if context else ffi.NULL, in_input, x)

def ContextSetParameterByKey3f(context, in_input, x, y, z):
    return lib.rprContextSetParameterByKey3f(context._get_handle() if context else ffi.NULL, in_input, x, y, z)

def ContextSetParameterByKey4f(context, in_input, x, y, z, w):
    return lib.rprContextSetParameterByKey4f(context._get_handle() if context else ffi.NULL, in_input, x, y, z, w)

def ContextSetParameterByKeyPtr(context, in_input, x):
    return lib.rprContextSetParameterByKeyPtr(context._get_handle() if context else ffi.NULL, in_input, x)

def ContextSetParameterByKeyString(context, in_input, value):
    return lib.rprContextSetParameterByKeyString(context._get_handle() if context else ffi.NULL, in_input, value)

def ContextSetScene(context, scene):
    return lib.rprContextSetScene(context._get_handle() if context else ffi.NULL, scene._get_handle() if scene else ffi.NULL)

def CreateContext(api_version, pluginIDs, pluginCount, creation_flags, props, cache_path, out_context):
    return lib.rprCreateContext(api_version, pluginIDs, pluginCount, creation_flags, props, cache_path, out_context._handle_ptr if out_context else ffi.NULL)

def CurveGetInfo(curve, curve_info, size, data, size_ret):
    return lib.rprCurveGetInfo(curve._get_handle() if curve else ffi.NULL, curve_info, size, data, size_ret)

def CurveSetMaterial(curve, material):
    return lib.rprCurveSetMaterial(curve._get_handle() if curve else ffi.NULL, material._get_handle() if material else ffi.NULL)

def CurveSetTransform(curve, transpose, transform):
    return lib.rprCurveSetTransform(curve._get_handle() if curve else ffi.NULL, transpose, transform)

def CurveSetVisibility(curve, visible):
    return lib.rprCurveSetVisibility(curve._get_handle() if curve else ffi.NULL, visible)

def CurveSetVisibilityFlag(curve, visibilityFlag, visible):
    return lib.rprCurveSetVisibilityFlag(curve._get_handle() if curve else ffi.NULL, visibilityFlag, visible)

def DirectionalLightSetRadiantPower3f(light, r, g, b):
    return lib.rprDirectionalLightSetRadiantPower3f(light._get_handle() if light else ffi.NULL, r, g, b)

def DirectionalLightSetShadowSoftnessAngle(light, softnessAngle):
    return lib.rprDirectionalLightSetShadowSoftnessAngle(light._get_handle() if light else ffi.NULL, softnessAngle)

def DiskLightSetAngle(light, angle):
    return lib.rprDiskLightSetAngle(light._get_handle() if light else ffi.NULL, angle)

def DiskLightSetRadiantPower3f(light, r, g, b):
    return lib.rprDiskLightSetRadiantPower3f(light._get_handle() if light else ffi.NULL, r, g, b)

def DiskLightSetRadius(light, radius):
    return lib.rprDiskLightSetRadius(light._get_handle() if light else ffi.NULL, radius)

def EnvironmentLightAttachPortal(scene, env_light, portal):
    return lib.rprEnvironmentLightAttachPortal(scene._get_handle() if scene else ffi.NULL, env_light._get_handle() if env_light else ffi.NULL, portal._get_handle() if portal else ffi.NULL)

def EnvironmentLightDetachPortal(scene, env_light, portal):
    return lib.rprEnvironmentLightDetachPortal(scene._get_handle() if scene else ffi.NULL, env_light._get_handle() if env_light else ffi.NULL, portal._get_handle() if portal else ffi.NULL)

def EnvironmentLightGetEnvironmentLightOverride(in_ibl, override, out_iblOverride):
    return lib.rprEnvironmentLightGetEnvironmentLightOverride(in_ibl._get_handle() if in_ibl else ffi.NULL, override, out_iblOverride._handle_ptr if out_iblOverride else ffi.NULL)

def EnvironmentLightSetEnvironmentLightOverride(in_ibl, override, in_iblOverride):
    return lib.rprEnvironmentLightSetEnvironmentLightOverride(in_ibl._get_handle() if in_ibl else ffi.NULL, override, in_iblOverride._get_handle() if in_iblOverride else ffi.NULL)

def EnvironmentLightSetImage(env_light, image):
    return lib.rprEnvironmentLightSetImage(env_light._get_handle() if env_light else ffi.NULL, image._get_handle() if image else ffi.NULL)

def EnvironmentLightSetIntensityScale(env_light, intensity_scale):
    return lib.rprEnvironmentLightSetIntensityScale(env_light._get_handle() if env_light else ffi.NULL, intensity_scale)

def FrameBufferClear(frame_buffer):
    return lib.rprFrameBufferClear(frame_buffer._get_handle() if frame_buffer else ffi.NULL)

def FrameBufferFillWithColor(frame_buffer, r, g, b, a):
    return lib.rprFrameBufferFillWithColor(frame_buffer._get_handle() if frame_buffer else ffi.NULL, r, g, b, a)

def FrameBufferGetInfo(framebuffer, info, size, data, size_ret):
    return lib.rprFrameBufferGetInfo(framebuffer._get_handle() if framebuffer else ffi.NULL, info, size, data, size_ret)

def FrameBufferSaveToFile(frame_buffer, file_path):
    return lib.rprFrameBufferSaveToFile(frame_buffer._get_handle() if frame_buffer else ffi.NULL, file_path)

def FrameBufferSaveToFileEx(framebufferList, framebufferCount, filePath, extraOptions):
    return lib.rprFrameBufferSaveToFileEx(framebufferList._handle_ptr if framebufferList else ffi.NULL, framebufferCount, filePath, extraOptions)

def FrameBufferSetLPE(frame_buffer, lpe):
    return lib.rprFrameBufferSetLPE(frame_buffer._get_handle() if frame_buffer else ffi.NULL, lpe)

def GridGetInfo(grid, grid_info, size, data, size_ret):
    return lib.rprGridGetInfo(grid, grid_info, size, data, size_ret)

def HeteroVolumeGetInfo(heteroVol, heteroVol_info, size, data, size_ret):
    return lib.rprHeteroVolumeGetInfo(heteroVol._get_handle() if heteroVol else ffi.NULL, heteroVol_info, size, data, size_ret)

def HeteroVolumeSetAlbedoGrid(heteroVolume, grid):
    return lib.rprHeteroVolumeSetAlbedoGrid(heteroVolume._get_handle() if heteroVolume else ffi.NULL, grid._get_handle() if grid else ffi.NULL)

def HeteroVolumeSetAlbedoLookup(heteroVolume, ptr, n):
    return lib.rprHeteroVolumeSetAlbedoLookup(heteroVolume._get_handle() if heteroVolume else ffi.NULL, ptr, n)

def HeteroVolumeSetAlbedoScale(heteroVolume, scale):
    return lib.rprHeteroVolumeSetAlbedoScale(heteroVolume._get_handle() if heteroVolume else ffi.NULL, scale)

def HeteroVolumeSetDensityGrid(heteroVolume, grid):
    return lib.rprHeteroVolumeSetDensityGrid(heteroVolume._get_handle() if heteroVolume else ffi.NULL, grid._get_handle() if grid else ffi.NULL)

def HeteroVolumeSetDensityLookup(heteroVolume, ptr, n):
    return lib.rprHeteroVolumeSetDensityLookup(heteroVolume._get_handle() if heteroVolume else ffi.NULL, ptr, n)

def HeteroVolumeSetDensityScale(heteroVolume, scale):
    return lib.rprHeteroVolumeSetDensityScale(heteroVolume._get_handle() if heteroVolume else ffi.NULL, scale)

def HeteroVolumeSetEmissionGrid(heteroVolume, grid):
    return lib.rprHeteroVolumeSetEmissionGrid(heteroVolume._get_handle() if heteroVolume else ffi.NULL, grid._get_handle() if grid else ffi.NULL)

def HeteroVolumeSetEmissionLookup(heteroVolume, ptr, n):
    return lib.rprHeteroVolumeSetEmissionLookup(heteroVolume._get_handle() if heteroVolume else ffi.NULL, ptr, n)

def HeteroVolumeSetEmissionScale(heteroVolume, scale):
    return lib.rprHeteroVolumeSetEmissionScale(heteroVolume._get_handle() if heteroVolume else ffi.NULL, scale)

def HeteroVolumeSetTransform(heteroVolume, transpose, transform):
    return lib.rprHeteroVolumeSetTransform(heteroVolume._get_handle() if heteroVolume else ffi.NULL, transpose, transform)

def IESLightSetImageFromFile(env_light, imagePath, nx, ny):
    return lib.rprIESLightSetImageFromFile(env_light._get_handle() if env_light else ffi.NULL, imagePath, nx, ny)

def IESLightSetImageFromIESdata(env_light, iesData, nx, ny):
    return lib.rprIESLightSetImageFromIESdata(env_light._get_handle() if env_light else ffi.NULL, iesData, nx, ny)

def IESLightSetRadiantPower3f(light, r, g, b):
    return lib.rprIESLightSetRadiantPower3f(light._get_handle() if light else ffi.NULL, r, g, b)

def ImageGetInfo(image, image_info, size, data, size_ret):
    return lib.rprImageGetInfo(image._get_handle() if image else ffi.NULL, image_info, size, data, size_ret)

def ImageSetFilter(image, type):
    return lib.rprImageSetFilter(image._get_handle() if image else ffi.NULL, type)

def ImageSetGamma(image, type):
    return lib.rprImageSetGamma(image._get_handle() if image else ffi.NULL, type)

def ImageSetInternalCompression(image, compressionEnabled):
    return lib.rprImageSetInternalCompression(image._get_handle() if image else ffi.NULL, compressionEnabled)

def ImageSetMipmapEnabled(image, enabled):
    return lib.rprImageSetMipmapEnabled(image._get_handle() if image else ffi.NULL, enabled)

def ImageSetOcioColorspace(image, ocioColorspace):
    return lib.rprImageSetOcioColorspace(image._get_handle() if image else ffi.NULL, ocioColorspace)

def ImageSetUDIM(imageUdimRoot, tileIndex, imageTile):
    return lib.rprImageSetUDIM(imageUdimRoot._get_handle() if imageUdimRoot else ffi.NULL, tileIndex, imageTile._get_handle() if imageTile else ffi.NULL)

def ImageSetWrap(image, type):
    return lib.rprImageSetWrap(image._get_handle() if image else ffi.NULL, type)

def InstanceGetBaseShape(shape, out_shape):
    return lib.rprInstanceGetBaseShape(shape, out_shape)

def LightGetInfo(light, info, size, data, size_ret):
    return lib.rprLightGetInfo(light._get_handle() if light else ffi.NULL, info, size, data, size_ret)

def LightSetGroupId(light, groupId):
    return lib.rprLightSetGroupId(light._get_handle() if light else ffi.NULL, groupId)

def LightSetTransform(light, transpose, transform):
    return lib.rprLightSetTransform(light._get_handle() if light else ffi.NULL, transpose, transform)

def LoadMaterialX(in_context, in_matsys, xmlData, incudeData, includeCount, basePath, imageAlreadyCreated_count, imageAlreadyCreated_paths, imageAlreadyCreated_list, listNodesOut, listNodesOut_count, listImagesOut, listImagesOut_count, rootNodeOut, rootDisplacementNodeOut):
    return lib.rprLoadMaterialX(in_context, in_matsys, xmlData, incudeData, includeCount, basePath, imageAlreadyCreated_count, imageAlreadyCreated_paths, imageAlreadyCreated_list, listNodesOut, listNodesOut_count, listImagesOut, listImagesOut_count, rootNodeOut, rootDisplacementNodeOut)

def LoadMaterialX_free(listNodes, listImages):
    return lib.rprLoadMaterialX_free(listNodes, listImages)

def MaterialNodeGetInfo(in_node, in_info, in_size, in_data, out_size):
    return lib.rprMaterialNodeGetInfo(in_node._get_handle() if in_node else ffi.NULL, in_info, in_size, in_data, out_size)

def MaterialNodeGetInputInfo(in_node, in_input_idx, in_info, in_size, in_data, out_size):
    return lib.rprMaterialNodeGetInputInfo(in_node._get_handle() if in_node else ffi.NULL, in_input_idx, in_info, in_size, in_data, out_size)

def MaterialNodeSetID(in_node, id):
    return lib.rprMaterialNodeSetID(in_node._get_handle() if in_node else ffi.NULL, id)

def MaterialNodeSetInputBufferDataByKey(in_node, in_input, buffer):
    return lib.rprMaterialNodeSetInputBufferDataByKey(in_node._get_handle() if in_node else ffi.NULL, in_input, buffer._get_handle() if buffer else ffi.NULL)

def MaterialNodeSetInputFByKey(in_node, in_input, in_value_x, in_value_y, in_value_z, in_value_w):
    return lib.rprMaterialNodeSetInputFByKey(in_node._get_handle() if in_node else ffi.NULL, in_input, in_value_x, in_value_y, in_value_z, in_value_w)

def MaterialNodeSetInputImageDataByKey(in_node, in_input, image):
    return lib.rprMaterialNodeSetInputImageDataByKey(in_node._get_handle() if in_node else ffi.NULL, in_input, image._get_handle() if image else ffi.NULL)

def MaterialNodeSetInputNByKey(in_node, in_input, in_input_node):
    return lib.rprMaterialNodeSetInputNByKey(in_node._get_handle() if in_node else ffi.NULL, in_input, in_input_node._get_handle() if in_input_node else ffi.NULL)

def MaterialNodeSetInputUByKey(in_node, in_input, in_value):
    return lib.rprMaterialNodeSetInputUByKey(in_node._get_handle() if in_node else ffi.NULL, in_input, in_value)

def MaterialSystemCreateNode(in_matsys, in_type, out_node):
    return lib.rprMaterialSystemCreateNode(in_matsys._get_handle() if in_matsys else ffi.NULL, in_type, out_node._handle_ptr if out_node else ffi.NULL)

def MaterialSystemGetInfo(in_material_system, type, in_size, in_data, out_size):
    return lib.rprMaterialSystemGetInfo(in_material_system._get_handle() if in_material_system else ffi.NULL, type, in_size, in_data, out_size)

def MaterialSystemGetSize(in_context, out_size):
    return lib.rprMaterialSystemGetSize(in_context._get_handle() if in_context else ffi.NULL, out_size)

def MeshGetInfo(mesh, mesh_info, size, data, size_ret):
    return lib.rprMeshGetInfo(mesh._get_handle() if mesh else ffi.NULL, mesh_info, size, data, size_ret)

def ObjectDelete(obj):
    return lib.rprObjectDelete(obj)

def ObjectGetCustomPointer(node, customPtr_out):
    return lib.rprObjectGetCustomPointer(node, customPtr_out)

def ObjectSetCustomPointer(node, customPtr):
    return lib.rprObjectSetCustomPointer(node, customPtr)

def ObjectSetName(node, name):
    return lib.rprObjectSetName(node, name)

def PointLightSetRadiantPower3f(light, r, g, b):
    return lib.rprPointLightSetRadiantPower3f(light._get_handle() if light else ffi.NULL, r, g, b)

def PostEffectGetInfo(effect, info, size, data, size_ret):
    return lib.rprPostEffectGetInfo(effect._get_handle() if effect else ffi.NULL, info, size, data, size_ret)

def PostEffectSetParameter1f(effect, name, x):
    return lib.rprPostEffectSetParameter1f(effect._get_handle() if effect else ffi.NULL, name, x)

def PostEffectSetParameter1u(effect, name, x):
    return lib.rprPostEffectSetParameter1u(effect._get_handle() if effect else ffi.NULL, name, x)

def PostEffectSetParameter3f(effect, name, x, y, z):
    return lib.rprPostEffectSetParameter3f(effect._get_handle() if effect else ffi.NULL, name, x, y, z)

def PostEffectSetParameter4f(effect, name, x, y, z, w):
    return lib.rprPostEffectSetParameter4f(effect._get_handle() if effect else ffi.NULL, name, x, y, z, w)

def RegisterPlugin(path):
    return lib.rprRegisterPlugin(path)

def SceneAttachCurve(scene, curve):
    return lib.rprSceneAttachCurve(scene._get_handle() if scene else ffi.NULL, curve._get_handle() if curve else ffi.NULL)

def SceneAttachHeteroVolume(scene, heteroVolume):
    return lib.rprSceneAttachHeteroVolume(scene._get_handle() if scene else ffi.NULL, heteroVolume._get_handle() if heteroVolume else ffi.NULL)

def SceneAttachLight(scene, light):
    return lib.rprSceneAttachLight(scene._get_handle() if scene else ffi.NULL, light._get_handle() if light else ffi.NULL)

def SceneAttachShape(scene, shape):
    return lib.rprSceneAttachShape(scene._get_handle() if scene else ffi.NULL, shape._get_handle() if shape else ffi.NULL)

def SceneClear(scene):
    return lib.rprSceneClear(scene._get_handle() if scene else ffi.NULL)

def SceneDetachCurve(scene, curve):
    return lib.rprSceneDetachCurve(scene._get_handle() if scene else ffi.NULL, curve._get_handle() if curve else ffi.NULL)

def SceneDetachHeteroVolume(scene, heteroVolume):
    return lib.rprSceneDetachHeteroVolume(scene._get_handle() if scene else ffi.NULL, heteroVolume._get_handle() if heteroVolume else ffi.NULL)

def SceneDetachLight(scene, light):
    return lib.rprSceneDetachLight(scene._get_handle() if scene else ffi.NULL, light._get_handle() if light else ffi.NULL)

def SceneDetachShape(scene, shape):
    return lib.rprSceneDetachShape(scene._get_handle() if scene else ffi.NULL, shape._get_handle() if shape else ffi.NULL)

def SceneGetBackgroundImage(scene, out_image):
    return lib.rprSceneGetBackgroundImage(scene._get_handle() if scene else ffi.NULL, out_image._handle_ptr if out_image else ffi.NULL)

def SceneGetCamera(scene, out_camera):
    return lib.rprSceneGetCamera(scene._get_handle() if scene else ffi.NULL, out_camera._handle_ptr if out_camera else ffi.NULL)

def SceneGetCameraRight(scene, out_camera):
    return lib.rprSceneGetCameraRight(scene._get_handle() if scene else ffi.NULL, out_camera._handle_ptr if out_camera else ffi.NULL)

def SceneGetEnvironmentLight(in_scene, out_light):
    return lib.rprSceneGetEnvironmentLight(in_scene._get_handle() if in_scene else ffi.NULL, out_light._handle_ptr if out_light else ffi.NULL)

def SceneGetInfo(scene, info, size, data, size_ret):
    return lib.rprSceneGetInfo(scene._get_handle() if scene else ffi.NULL, info, size, data, size_ret)

def SceneSetBackgroundImage(scene, image):
    return lib.rprSceneSetBackgroundImage(scene._get_handle() if scene else ffi.NULL, image._get_handle() if image else ffi.NULL)

def SceneSetCamera(scene, camera):
    return lib.rprSceneSetCamera(scene._get_handle() if scene else ffi.NULL, camera._get_handle() if camera else ffi.NULL)

def SceneSetCameraRight(scene, camera):
    return lib.rprSceneSetCameraRight(scene._get_handle() if scene else ffi.NULL, camera._get_handle() if camera else ffi.NULL)

def SceneSetEnvironmentLight(in_scene, in_light):
    return lib.rprSceneSetEnvironmentLight(in_scene._get_handle() if in_scene else ffi.NULL, in_light._get_handle() if in_light else ffi.NULL)

def ShapeAutoAdaptSubdivisionFactor(shape, framebuffer, camera, factor):
    return lib.rprShapeAutoAdaptSubdivisionFactor(shape._get_handle() if shape else ffi.NULL, framebuffer._get_handle() if framebuffer else ffi.NULL, camera._get_handle() if camera else ffi.NULL, factor)

def ShapeGetInfo(arg0, arg1, arg2, arg3, arg4):
    return lib.rprShapeGetInfo(arg0._get_handle() if arg0 else ffi.NULL, arg1, arg2, arg3, arg4)

def ShapeMarkStatic(in_shape, in_is_static):
    return lib.rprShapeMarkStatic(in_shape._get_handle() if in_shape else ffi.NULL, in_is_static)

def ShapeSetAngularMotion(shape, x, y, z, w):
    return lib.rprShapeSetAngularMotion(shape._get_handle() if shape else ffi.NULL, x, y, z, w)

def ShapeSetContourIgnore(shape, ignoreInContour):
    return lib.rprShapeSetContourIgnore(shape._get_handle() if shape else ffi.NULL, ignoreInContour)

def ShapeSetDisplacementMaterial(shape, materialNode):
    return lib.rprShapeSetDisplacementMaterial(shape._get_handle() if shape else ffi.NULL, materialNode._get_handle() if materialNode else ffi.NULL)

def ShapeSetDisplacementScale(shape, minscale, maxscale):
    return lib.rprShapeSetDisplacementScale(shape._get_handle() if shape else ffi.NULL, minscale, maxscale)

def ShapeSetHeteroVolume(shape, heteroVolume):
    return lib.rprShapeSetHeteroVolume(shape._get_handle() if shape else ffi.NULL, heteroVolume._get_handle() if heteroVolume else ffi.NULL)

def ShapeSetLayerMask(shape, layerMask):
    return lib.rprShapeSetLayerMask(shape._get_handle() if shape else ffi.NULL, layerMask)

def ShapeSetLightGroupID(shape, lightGroupID):
    return lib.rprShapeSetLightGroupID(shape._get_handle() if shape else ffi.NULL, lightGroupID)

def ShapeSetLinearMotion(shape, x, y, z):
    return lib.rprShapeSetLinearMotion(shape._get_handle() if shape else ffi.NULL, x, y, z)

def ShapeSetMaterial(shape, node):
    return lib.rprShapeSetMaterial(shape._get_handle() if shape else ffi.NULL, node._get_handle() if node else ffi.NULL)

def ShapeSetMaterialFaces(shape, node, face_indices, num_faces):
    return lib.rprShapeSetMaterialFaces(shape._get_handle() if shape else ffi.NULL, node._get_handle() if node else ffi.NULL, face_indices, num_faces)

def ShapeSetMotionTransform(shape, transpose, transform, timeIndex):
    return lib.rprShapeSetMotionTransform(shape._get_handle() if shape else ffi.NULL, transpose, transform, timeIndex)

def ShapeSetMotionTransformCount(shape, transformCount):
    return lib.rprShapeSetMotionTransformCount(shape._get_handle() if shape else ffi.NULL, transformCount)

def ShapeSetObjectGroupID(shape, objectGroupID):
    return lib.rprShapeSetObjectGroupID(shape._get_handle() if shape else ffi.NULL, objectGroupID)

def ShapeSetObjectID(shape, objectID):
    return lib.rprShapeSetObjectID(shape._get_handle() if shape else ffi.NULL, objectID)

def ShapeSetReflectionCatcher(shape, reflectionCatcher):
    return lib.rprShapeSetReflectionCatcher(shape._get_handle() if shape else ffi.NULL, reflectionCatcher)

def ShapeSetScaleMotion(shape, x, y, z):
    return lib.rprShapeSetScaleMotion(shape._get_handle() if shape else ffi.NULL, x, y, z)

def ShapeSetShadowCatcher(shape, shadowCatcher):
    return lib.rprShapeSetShadowCatcher(shape._get_handle() if shape else ffi.NULL, shadowCatcher)

def ShapeSetSubdivisionAutoRatioCap(shape, autoRatioCap):
    return lib.rprShapeSetSubdivisionAutoRatioCap(shape._get_handle() if shape else ffi.NULL, autoRatioCap)

def ShapeSetSubdivisionBoundaryInterop(shape, type):
    return lib.rprShapeSetSubdivisionBoundaryInterop(shape._get_handle() if shape else ffi.NULL, type)

def ShapeSetSubdivisionCreaseWeight(shape, factor):
    return lib.rprShapeSetSubdivisionCreaseWeight(shape._get_handle() if shape else ffi.NULL, factor)

def ShapeSetSubdivisionFactor(shape, factor):
    return lib.rprShapeSetSubdivisionFactor(shape._get_handle() if shape else ffi.NULL, factor)

def ShapeSetTransform(shape, transpose, transform):
    return lib.rprShapeSetTransform(shape._get_handle() if shape else ffi.NULL, transpose, transform)

def ShapeSetVertexValue(in_shape, setIndex, indices, values, indicesCount):
    return lib.rprShapeSetVertexValue(in_shape._get_handle() if in_shape else ffi.NULL, setIndex, indices, values, indicesCount)

def ShapeSetVisibility(shape, visible):
    return lib.rprShapeSetVisibility(shape._get_handle() if shape else ffi.NULL, visible)

def ShapeSetVisibilityFlag(shape, visibilityFlag, visible):
    return lib.rprShapeSetVisibilityFlag(shape._get_handle() if shape else ffi.NULL, visibilityFlag, visible)

def ShapeSetVisibilityInSpecular(shape, visible):
    return lib.rprShapeSetVisibilityInSpecular(shape._get_handle() if shape else ffi.NULL, visible)

def ShapeSetVolumeMaterial(shape, node):
    return lib.rprShapeSetVolumeMaterial(shape._get_handle() if shape else ffi.NULL, node._get_handle() if node else ffi.NULL)

def SkyLightAttachPortal(scene, skylight, portal):
    return lib.rprSkyLightAttachPortal(scene._get_handle() if scene else ffi.NULL, skylight._get_handle() if skylight else ffi.NULL, portal._get_handle() if portal else ffi.NULL)

def SkyLightDetachPortal(scene, skylight, portal):
    return lib.rprSkyLightDetachPortal(scene._get_handle() if scene else ffi.NULL, skylight._get_handle() if skylight else ffi.NULL, portal._get_handle() if portal else ffi.NULL)

def SkyLightSetAlbedo(skylight, albedo):
    return lib.rprSkyLightSetAlbedo(skylight._get_handle() if skylight else ffi.NULL, albedo)

def SkyLightSetDirection(skylight, x, y, z):
    return lib.rprSkyLightSetDirection(skylight._get_handle() if skylight else ffi.NULL, x, y, z)

def SkyLightSetScale(skylight, scale):
    return lib.rprSkyLightSetScale(skylight._get_handle() if skylight else ffi.NULL, scale)

def SkyLightSetTurbidity(skylight, turbidity):
    return lib.rprSkyLightSetTurbidity(skylight._get_handle() if skylight else ffi.NULL, turbidity)

def SphereLightSetRadiantPower3f(light, r, g, b):
    return lib.rprSphereLightSetRadiantPower3f(light._get_handle() if light else ffi.NULL, r, g, b)

def SphereLightSetRadius(light, angle):
    return lib.rprSphereLightSetRadius(light._get_handle() if light else ffi.NULL, angle)

def SpotLightSetConeShape(light, iangle, oangle):
    return lib.rprSpotLightSetConeShape(light._get_handle() if light else ffi.NULL, iangle, oangle)

def SpotLightSetRadiantPower3f(light, r, g, b):
    return lib.rprSpotLightSetRadiantPower3f(light._get_handle() if light else ffi.NULL, r, g, b)

_functions_names = ['BufferGetInfo', 'CameraGetInfo', 'CameraLookAt', 'CameraSetAngularMotion', 'CameraSetApertureBlades', 'CameraSetExposure', 'CameraSetFStop', 'CameraSetFarPlane', 'CameraSetFocalLength', 'CameraSetFocalTilt', 'CameraSetFocusDistance', 'CameraSetIPD', 'CameraSetLensShift', 'CameraSetLinearMotion', 'CameraSetMode', 'CameraSetNearPlane', 'CameraSetOrthoHeight', 'CameraSetOrthoWidth', 'CameraSetSensorSize', 'CameraSetTiltCorrection', 'CameraSetTransform', 'CompositeCompute', 'CompositeGetInfo', 'CompositeSetInput1u', 'CompositeSetInput4f', 'CompositeSetInputC', 'CompositeSetInputFb', 'CompositeSetInputLUT', 'CompositeSetInputOp', 'ContextAbortRender', 'ContextAttachPostEffect', 'ContextClearMemory', 'ContextCreateBuffer', 'ContextCreateCamera', 'ContextCreateComposite', 'ContextCreateCurve', 'ContextCreateDirectionalLight', 'ContextCreateDiskLight', 'ContextCreateEnvironmentLight', 'ContextCreateFrameBuffer', 'ContextCreateFramebufferFromGLTexture2D', 'ContextCreateGrid', 'ContextCreateHeteroVolume', 'ContextCreateIESLight', 'ContextCreateImage', 'ContextCreateImageFromFile', 'ContextCreateImageFromFileMemory', 'ContextCreateInstance', 'ContextCreateLUTFromData', 'ContextCreateLUTFromFile', 'ContextCreateMaterialSystem', 'ContextCreateMesh', 'ContextCreateMeshEx', 'ContextCreateMeshEx2', 'ContextCreatePointLight', 'ContextCreatePostEffect', 'ContextCreateScene', 'ContextCreateSkyLight', 'ContextCreateSphereLight', 'ContextCreateSpotLight', 'ContextDetachPostEffect', 'ContextGetAOV', 'ContextGetAttachedPostEffect', 'ContextGetAttachedPostEffectCount', 'ContextGetFunctionPtr', 'ContextGetInfo', 'ContextGetInternalParameter1u', 'ContextGetInternalParameter4f', 'ContextGetInternalParameterBuffer', 'ContextGetParameterInfo', 'ContextGetScene', 'ContextRender', 'ContextRenderTile', 'ContextResolveFrameBuffer', 'ContextSetAOV', 'ContextSetAOVindexLookup', 'ContextSetActivePlugin', 'ContextSetInternalParameter1u', 'ContextSetInternalParameter4f', 'ContextSetInternalParameterBuffer', 'ContextSetParameterByKey1f', 'ContextSetParameterByKey1u', 'ContextSetParameterByKey3f', 'ContextSetParameterByKey4f', 'ContextSetParameterByKeyPtr', 'ContextSetParameterByKeyString', 'ContextSetScene', 'CreateContext', 'CurveGetInfo', 'CurveSetMaterial', 'CurveSetTransform', 'CurveSetVisibility', 'CurveSetVisibilityFlag', 'DirectionalLightSetRadiantPower3f', 'DirectionalLightSetShadowSoftnessAngle', 'DiskLightSetAngle', 'DiskLightSetRadiantPower3f', 'DiskLightSetRadius', 'EnvironmentLightAttachPortal', 'EnvironmentLightDetachPortal', 'EnvironmentLightGetEnvironmentLightOverride', 'EnvironmentLightSetEnvironmentLightOverride', 'EnvironmentLightSetImage', 'EnvironmentLightSetIntensityScale', 'FrameBufferClear', 'FrameBufferFillWithColor', 'FrameBufferGetInfo', 'FrameBufferSaveToFile', 'FrameBufferSaveToFileEx', 'FrameBufferSetLPE', 'GridGetInfo', 'HeteroVolumeGetInfo', 'HeteroVolumeSetAlbedoGrid', 'HeteroVolumeSetAlbedoLookup', 'HeteroVolumeSetAlbedoScale', 'HeteroVolumeSetDensityGrid', 'HeteroVolumeSetDensityLookup', 'HeteroVolumeSetDensityScale', 'HeteroVolumeSetEmissionGrid', 'HeteroVolumeSetEmissionLookup', 'HeteroVolumeSetEmissionScale', 'HeteroVolumeSetTransform', 'IESLightSetImageFromFile', 'IESLightSetImageFromIESdata', 'IESLightSetRadiantPower3f', 'ImageGetInfo', 'ImageSetFilter', 'ImageSetGamma', 'ImageSetInternalCompression', 'ImageSetMipmapEnabled', 'ImageSetOcioColorspace', 'ImageSetUDIM', 'ImageSetWrap', 'InstanceGetBaseShape', 'LightGetInfo', 'LightSetGroupId', 'LightSetTransform', 'LoadMaterialX', 'LoadMaterialX_free', 'MaterialNodeGetInfo', 'MaterialNodeGetInputInfo', 'MaterialNodeSetID', 'MaterialNodeSetInputBufferDataByKey', 'MaterialNodeSetInputFByKey', 'MaterialNodeSetInputImageDataByKey', 'MaterialNodeSetInputNByKey', 'MaterialNodeSetInputUByKey', 'MaterialSystemCreateNode', 'MaterialSystemGetInfo', 'MaterialSystemGetSize', 'MeshGetInfo', 'ObjectDelete', 'ObjectGetCustomPointer', 'ObjectSetCustomPointer', 'ObjectSetName', 'PointLightSetRadiantPower3f', 'PostEffectGetInfo', 'PostEffectSetParameter1f', 'PostEffectSetParameter1u', 'PostEffectSetParameter3f', 'PostEffectSetParameter4f', 'RegisterPlugin', 'SceneAttachCurve', 'SceneAttachHeteroVolume', 'SceneAttachLight', 'SceneAttachShape', 'SceneClear', 'SceneDetachCurve', 'SceneDetachHeteroVolume', 'SceneDetachLight', 'SceneDetachShape', 'SceneGetBackgroundImage', 'SceneGetCamera', 'SceneGetCameraRight', 'SceneGetEnvironmentLight', 'SceneGetInfo', 'SceneSetBackgroundImage', 'SceneSetCamera', 'SceneSetCameraRight', 'SceneSetEnvironmentLight', 'ShapeAutoAdaptSubdivisionFactor', 'ShapeGetInfo', 'ShapeMarkStatic', 'ShapeSetAngularMotion', 'ShapeSetContourIgnore', 'ShapeSetDisplacementMaterial', 'ShapeSetDisplacementScale', 'ShapeSetHeteroVolume', 'ShapeSetLayerMask', 'ShapeSetLightGroupID', 'ShapeSetLinearMotion', 'ShapeSetMaterial', 'ShapeSetMaterialFaces', 'ShapeSetMotionTransform', 'ShapeSetMotionTransformCount', 'ShapeSetObjectGroupID', 'ShapeSetObjectID', 'ShapeSetReflectionCatcher', 'ShapeSetScaleMotion', 'ShapeSetShadowCatcher', 'ShapeSetSubdivisionAutoRatioCap', 'ShapeSetSubdivisionBoundaryInterop', 'ShapeSetSubdivisionCreaseWeight', 'ShapeSetSubdivisionFactor', 'ShapeSetTransform', 'ShapeSetVertexValue', 'ShapeSetVisibility', 'ShapeSetVisibilityFlag', 'ShapeSetVisibilityInSpecular', 'ShapeSetVolumeMaterial', 'SkyLightAttachPortal', 'SkyLightDetachPortal', 'SkyLightSetAlbedo', 'SkyLightSetDirection', 'SkyLightSetScale', 'SkyLightSetTurbidity', 'SphereLightSetRadiantPower3f', 'SphereLightSetRadius', 'SpotLightSetConeShape', 'SpotLightSetRadiantPower3f']
